// Generated by CoffeeScript 1.4.0
var AuthState, JL_init, extractPageRouteOptions, hijackLinkBehavior, router, trackMixpanelUser,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

window.JL || (window.JL = {});

AuthState = (function() {

  function AuthState(userAttributes) {
    this.getUsername = __bind(this.getUsername, this);

    this.getUserId = __bind(this.getUserId, this);

    this.isAuthenticated = __bind(this.isAuthenticated, this);

    this.getUser = __bind(this.getUser, this);

    this.setUser = __bind(this.setUser, this);
    _.extend(this, Backbone.Events);
    this.setUser(userAttributes);
  }

  AuthState.prototype.setUser = function(userAttributes) {
    this._user = new User(userAttributes);
    return this.trigger('change', this._user);
  };

  AuthState.prototype.getUser = function() {
    assert(this._user instanceof User);
    return this._user;
  };

  AuthState.prototype.isAuthenticated = function() {
    return !!this._user.id;
  };

  AuthState.prototype.getUserId = function() {
    var _ref;
    return (_ref = this._user) != null ? _ref.get('id') : void 0;
  };

  AuthState.prototype.getUsername = function() {
    var _ref;
    return (_ref = this._user) != null ? _ref.get('username') : void 0;
  };

  return AuthState;

})();

hijackLinkBehavior = function() {
  return $(document).on('click', 'a', function(e) {
    var a, fullUrl, path;
    log("hijackLinkBehavior");
    a = $(this);
    if (a.hasClass('authorized-logout')) {
      e.preventDefault();
      router.doLogout();
      return;
    }
    if (a.attr('target') === '_blank') {
      return;
    }
    if ($(e.target).attr('href') === '#') {
      return;
    }
    fullUrl = this.href;
    if (!testSameOrigin(fullUrl)) {
      return;
    }
    if (e.metaKey || e.ctrlKey || e.altKey) {
      return;
    }
    e.preventDefault();
    log("link hijacked");
    path = this.pathname;
    return router.internalNavigate(path);
  });
};

trackMixpanelUser = function() {
  var user;
  user = JL.AuthState.getUser();
  if (user != null ? user.id : void 0) {
    mixpanel.identify(user.id);
    return mixpanel.people.set({
      $username: user.get('username'),
      $email: user.get('email')
    });
  }
};

extractPageRouteOptions = function() {
  var args, itemId, pageId, pageIdentifier, routeName, username;
  routeName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  switch (routeName) {
    case 'showPage':
      username = args[0], pageIdentifier = args[1];
      return {
        username: username,
        pageIdentifier: pageIdentifier
      };
    case 'showPageId':
      pageId = args[0];
      return {
        pageId: pageId
      };
    case 'showPageIdAtItem':
      pageId = args[0], itemId = args[1];
      return {
        pageId: pageId,
        initId: itemId
      };
    case 'showPageAtItem':
      username = args[0], pageIdentifier = args[1], itemId = args[2];
      return {
        username: username,
        pageIdentifier: pageIdentifier,
        initId: itemId
      };
    default:
      throw new Error("Unknown page view " + routeName);
  }
};

router = new ((function(_super) {

  __extends(_Class, _super);

  function _Class() {
    this._setTitle = __bind(this._setTitle, this);

    this._doOuterPageView = __bind(this._doOuterPageView, this);

    this._redirect = __bind(this._redirect, this);

    this._setView = __bind(this._setView, this);

    this.do500 = __bind(this.do500, this);

    this.do404 = __bind(this.do404, this);

    this.do403 = __bind(this.do403, this);

    this.internalNavigate = __bind(this.internalNavigate, this);

    this._getRouteName = __bind(this._getRouteName, this);

    this.showPageIdAtItem = __bind(this.showPageIdAtItem, this);

    this.showPageId = __bind(this.showPageId, this);

    this.showPageAtItem = __bind(this.showPageAtItem, this);

    this.showPage = __bind(this.showPage, this);

    this.doPageRoute = __bind(this.doPageRoute, this);
    return _Class.__super__.constructor.apply(this, arguments);
  }

  _Class.prototype.initialize = function() {
    return this.container = $('#spa_container');
  };

  _Class.prototype.routes = {
    '': 'index',
    'account/login/': 'login',
    'home/': 'home',
    'pages/': 'pages',
    'new': 'quickPage',
    'new/': 'quickPage',
    'account/settings/': 'settings',
    'account/settings/unsubscribe/:emailType/:code/': 'unsubscribe',
    'account/register/': 'registration',
    'account/password/reset/': 'password_reset',
    'account/password/reset/confirm/:tokens/': 'password_reset_confirm',
    'account/password/reset/confirm/:tokens/': 'password_reset_confirm',
    ':username/': 'showUser',
    'page/:pageId/': 'showPageId',
    'page/:pageId/item-:itemId/': 'showPageIdAtItem',
    ':username/:pageIdentifier/': 'showPage',
    ':username/:pageIdentifier/item-:itemId/': 'showPageAtItem',
    '*path': 'default'
  };

  _Class.prototype.doPageRoute = function() {
    var args, options, routeName;
    routeName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    options = extractPageRouteOptions.apply(null, [routeName].concat(__slice.call(args)));
    return router._doOuterPageView(options);
  };

  _Class.prototype.showPage = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.doPageRoute.apply(this, ['showPage'].concat(__slice.call(args)));
  };

  _Class.prototype.showPageAtItem = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.doPageRoute.apply(this, ['showPageAtItem'].concat(__slice.call(args)));
  };

  _Class.prototype.showPageId = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.doPageRoute.apply(this, ['showPageId'].concat(__slice.call(args)));
  };

  _Class.prototype.showPageIdAtItem = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.doPageRoute.apply(this, ['showPageIdAtItem'].concat(__slice.call(args)));
  };

  _Class.prototype.pageViews = ['showPageId', 'showPageIdAtItem', 'showPage', 'showPageAtItem'];

  _Class.prototype._getRouteName = function(path) {
    var pattern, routeName, routeRegex, _ref;
    _ref = this.routes;
    for (pattern in _ref) {
      routeName = _ref[pattern];
      routeRegex = this._routeToRegExp(pattern);
      if (routeRegex.test(path)) {
        return [routeRegex, routeName];
      }
    }
    throw new Error("unmatched internal route");
  };

  _Class.prototype._routeStripper = /^[#\/]|\s+$/g;

  _Class.prototype.internalNavigate = function(path) {
    var args, options, routeName, routeRegex, _ref;
    path = path.replace(this._routeStripper, '');
    _ref = this._getRouteName(path), routeRegex = _ref[0], routeName = _ref[1];
    if (__indexOf.call(this.pageViews, routeName) < 0) {
      this.navigate(path, {
        trigger: true
      });
      return;
    }
    args = this._extractParameters(routeRegex, path);
    options = extractPageRouteOptions.apply(null, [routeName].concat(__slice.call(args)));
    assert(this._view, "internalNavigate without an existing view?");
    if (this._view.wantsToHandle(options)) {
      return this._view.handleNewOptions(options);
    } else {
      this.navigate(path, {
        trigger: true
      });
    }
  };

  _Class.prototype.index = function() {
    if (JL.AuthState.isAuthenticated()) {
      return this._redirect('home/');
    } else {
      return this._setView(IndexView);
    }
  };

  _Class.prototype.login = function() {
    if (JL.AuthState.isAuthenticated()) {
      return this._redirect('home/');
    } else {
      return this._setView(LoginView);
    }
  };

  _Class.prototype.doLogout = function() {
    var logout,
      _this = this;
    logout = API.xhrMethod('account/logout');
    logout.done(function(response) {
      _this._view.queueSuccessMessage(makeMessage('logout_success'));
      JL.AuthState.setUser({});
      return _this._redirect(URLs.auth_login);
    });
    return logout.fail(function(err) {
      return _this._view.showErrorMessage(makeMessage('logout_error'));
    });
  };

  _Class.prototype.home = function() {
    if (!JL.AuthState.isAuthenticated()) {
      return this._redirect('account/login/');
    } else {
      return this._setView(HomeView);
    }
  };

  _Class.prototype.pages = function() {
    if (!JL.AuthState.isAuthenticated()) {
      return this._redirect('account/login/');
    } else {
      return this._setView(PagesView);
    }
  };

  _Class.prototype.quickPage = function() {
    var quickPage,
      _this = this;
    quickPage = API.xhrMethod('quick-page');
    quickPage.done(function(response) {
      var path;
      if (response.success) {
        mixpanel.track("Page created", {
          "Quick page": true
        });
        path = response.data.pageUrl;
        return _this._redirect(path);
      } else if (response.status_code === 404) {
        return _this.do404();
      } else {
        return _this.do500();
      }
    });
    return quickPage.fail(this.do500);
  };

  _Class.prototype.settings = function() {
    if (!JL.AuthState.isAuthenticated()) {
      return this._redirect('account/login/');
    } else {
      return this._setView(SettingsView);
    }
  };

  _Class.prototype.unsubscribe = function(emailType, token) {
    var next, r, refetchAndRedirect, trackEvent, uid, username, xs, _ref,
      _this = this;
    this.container.empty().text('Unsubscribing...');
    next = '/account/settings/';
    token = decodeURIComponent(token);
    _ref = token.split('|'), uid = _ref[0], username = _ref[1], xs = 3 <= _ref.length ? __slice.call(_ref, 2) : [];
    trackEvent = function(success) {
      return mixpanel.track("Unsubscribe via email", {
        emailType: emailType,
        success: success
      });
    };
    refetchAndRedirect = function() {
      var u;
      u = JL.AuthState.getUser();
      return u.fetch().always(function() {
        return _this._redirect(next);
      });
    };
    r = API.xhrMethod('unsubscribe', {
      emailType: emailType,
      token: token
    });
    r.done(function() {
      var name;
      trackEvent(true);
      if (uid === JL.AuthState.getUserId()) {
        name = 'You';
      } else {
        name = username;
      }
      JL.queuedMessages.push({
        tags: 'success-message',
        text: "" + name + " successfully unsubscribed."
      });
      return refetchAndRedirect();
    });
    return r.fail(function() {
      trackEvent(false);
      return refetchAndRedirect();
    });
  };

  _Class.prototype.registration = function() {
    return this._setView(RegistrationView);
  };

  _Class.prototype.password_reset = function() {
    return this._setView(PasswordResetView);
  };

  _Class.prototype.password_reset_confirm = function(tokens) {
    return this._setView(PasswordResetConfirmView, {
      tokens: tokens
    });
  };

  _Class.prototype.showUser = function(username) {
    return this._setView(ProfileView, {
      username: username
    });
  };

  _Class.prototype.do403 = function(opt_username) {
    return this._setView(Error403, {
      username: opt_username
    });
  };

  _Class.prototype["default"] = function() {
    if (window.location.search) {
      return this._redirect(window.location.pathname);
    } else {
      return $('body').text('Something went wrong :( Try reloading.');
    }
  };

  _Class.prototype.do404 = function() {
    return this._setView(Error404);
  };

  _Class.prototype.do500 = function() {
    return this.container.empty().text('500');
  };

  _Class.prototype._setView = function(ViewClass, options) {
    var oldView, view;
    oldView = this._view;
    $('body').removeClass().addClass(ViewClass.bodyClass);
    view = this._view = new ViewClass(options);
    this.container.empty().append(view.el);
    view.trigger('dom-insert');
    if (oldView != null) {
      oldView.off('change-title', this._setTitle);
    }
    if (oldView != null) {
      oldView.destroy();
    }
    view.on('change-title', this._setTitle);
    this._setTitle(_.result(view, 'documentTitle'));
    if (window.twttr) {
      setTimeout(function() {
        return window.twttr.widgets.load();
      }, 0);
    }
    if (window.FB) {
      return setTimeout(function() {
        return FB.XFBML.parse();
      }, 0);
    }
  };

  _Class.prototype._redirect = function(path) {
    return this.navigate(path, {
      trigger: true,
      replace: true
    });
  };

  _Class.prototype._doOuterPageView = function(options) {
    var defaults;
    defaults = {
      fullscreen: true
    };
    options = _.extend(defaults, options);
    return this._setView(OuterPageView, options);
  };

  _Class.prototype._setTitle = function(newTitle) {
    return document.title = newTitle || 'Jotleaf';
  };

  return _Class;

})(Backbone.Router));

JL_init = function() {
  var f, followDB, _i, _len, _ref;
  hijackLinkBehavior();
  JL.queuedMessages = [];
  JL.AuthState = new AuthState(JL_CONFIG.USER);
  trackMixpanelUser();
  JL.AuthState.on('change', trackMixpanelUser);
  followDB = Database2.modelDB(Follow);
  _ref = JL_CONFIG.FOLLOWS;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    f = _ref[_i];
    followDB.addInstance(new Follow(f));
  }
  return Backbone.history.start({
    pushState: true,
    hashChange: false
  });
};

$(JL_init);
