// Generated by CoffeeScript 1.4.0
var EmbedItem, Follow, ImageItem, Item, ItemSet, JotLeafModel, Membership, Memberships, NewsFeed, NewsFeedListing, Page, RejectedFollowSuggestion, TextItem, User, UserFollows, appendExtraPageAttributes,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

JotLeafModel = (function(_super) {

  __extends(JotLeafModel, _super);

  function JotLeafModel() {
    this.save = __bind(this.save, this);

    this.destroy = __bind(this.destroy, this);

    this._autosave = __bind(this._autosave, this);

    this.edit = __bind(this.edit, this);

    this.once = __bind(this.once, this);

    this.sync = __bind(this.sync, this);

    this.url = __bind(this.url, this);

    this.urlRoot = __bind(this.urlRoot, this);
    return JotLeafModel.__super__.constructor.apply(this, arguments);
  }

  JotLeafModel.prototype.initialize = function() {
    this.on('edit', this._autosave);
    return this._currentSync = null;
  };

  JotLeafModel.prototype.urlRoot = function() {
    return "/api/v2/" + this.constructor.shortName + "/";
  };

  JotLeafModel.prototype.url = function() {
    var base;
    if (_.isString(this.urlRoot)) {
      base = this.urlRoot;
    } else {
      base = this.urlRoot();
    }
    if (this.isNew()) {
      return base;
    }
    return base + encodeURIComponent(this.id) + '/';
  };

  JotLeafModel.prototype.sync = function(method, model, options) {
    var data, syncAndRemove,
      _this = this;
    if (method !== 'read') {
      options.contentType = 'application/json';
      data = {
        meta: API.getClientData()
      };
      if (method === 'create' || method === 'update') {
        data.model = model.toJSON();
      }
      options.data = JSON.stringify(data);
      syncAndRemove = function() {
        return _this._currentSync = Backbone.sync(method, model, options).then(function() {
          return _this._currentSync = null;
        });
      };
      if (this._currentSync) {
        return this._currentSync.always(syncAndRemove);
      } else {
        return syncAndRemove();
      }
    } else {
      return Backbone.sync(method, model, options);
    }
  };

  JotLeafModel.prototype.getN = function() {
    var a, attrs;
    attrs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = attrs.length; _i < _len; _i++) {
        a = attrs[_i];
        _results.push(this.attributes[a]);
      }
      return _results;
    }).call(this);
  };

  JotLeafModel.prototype.once = function(events, callback) {
    var wrapped,
      _this = this;
    wrapped = function() {
      _this.off(events, wrapped);
      return callback.apply(_this, arguments);
    };
    this.on(events, wrapped);
    return wrapped;
  };

  JotLeafModel.prototype.edit = function(attribute, value, options) {
    log('editing', attribute, value);
    if (value === this.get(attribute)) {
      log('edit skipping out');
      return;
    }
    this.trigger('edit');
    this.trigger("edit:" + attribute, value);
    return this.set(attribute, value, options);
  };

  JotLeafModel.prototype._autosave = function() {
    var autoSaveId,
      _this = this;
    autoSaveId = this.cid;
    return $.doTimeout(autoSaveId, 300, function() {
      log("Autosaving object", _this);
      _this.save();
      return false;
    });
  };

  JotLeafModel.prototype.destroy = function(options) {
    var destroy, model, success, xhr;
    this._destroyed = true;
    options = options ? _.clone(options) : {};
    model = this;
    success = options.success;
    destroy = function() {
      return model.trigger('destroy', model, model.collection, options);
    };
    options.success = function(model, resp, options) {
      if (options.wait || model.isNew()) {
        destroy();
      }
      if (success) {
        return success(model, resp, options);
      }
    };
    if (!this._currentSync && this.isNew()) {
      options.success(this, null, options);
      return false;
    }
    xhr = this.sync('delete', this, options);
    if (!options.wait) {
      destroy();
    }
    return xhr;
  };

  JotLeafModel.prototype.save = function() {
    var _this = this;
    if (this._destroyed) {
      log("canceling save -- destroyed");
      return;
    }
    if (!this.id) {
      if (this._saving) {
        this.once('change:id', function() {
          return _this.save();
        });
        return;
      } else {
        this._saving = true;
      }
    }
    return JotLeafModel.__super__.save.apply(this, arguments);
  };

  return JotLeafModel;

})(Backbone.Model);

User = (function(_super) {

  __extends(User, _super);

  function User() {
    this.profileUrl = __bind(this.profileUrl, this);
    return User.__super__.constructor.apply(this, arguments);
  }

  User.shortName = 'user';

  User.collectBy = '-';

  User.prototype.profileUrl = function() {
    assert(this.id);
    return '/' + this.get('username') + '/';
  };

  return User;

})(JotLeafModel);

Membership = (function(_super) {

  __extends(Membership, _super);

  function Membership() {
    return Membership.__super__.constructor.apply(this, arguments);
  }

  Membership.shortName = 'membership';

  return Membership;

})(JotLeafModel);

Memberships = (function(_super) {

  __extends(Memberships, _super);

  function Memberships() {
    return Memberships.__super__.constructor.apply(this, arguments);
  }

  Memberships.prototype.model = Membership;

  return Memberships;

})(Backbone.Collection);

ItemSet = (function(_super) {

  __extends(ItemSet, _super);

  function ItemSet() {
    this.byType = __bind(this.byType, this);
    return ItemSet.__super__.constructor.apply(this, arguments);
  }

  ItemSet.prototype.byType = function(type) {
    assert(type === 'textitem' || type === 'imageitem' || type === 'embeditem');
    return this.filter(function(m) {
      return m.constructor.shortName === type;
    });
  };

  return ItemSet;

})(Backbone.Collection);

appendExtraPageAttributes = function(page, response) {
  var Cls, attrName, item, itemList, itemTypes, items, _i, _j, _k, _len, _len1, _len2, _ref;
  page.owner = new User(response.owner);
  itemTypes = [['textitems', TextItem], ['embeditems', EmbedItem], ['imageitems', ImageItem]];
  items = [];
  for (_i = 0, _len = itemTypes.length; _i < _len; _i++) {
    _ref = itemTypes[_i], attrName = _ref[0], Cls = _ref[1];
    itemList = response[attrName];
    for (_j = 0, _len1 = itemList.length; _j < _len1; _j++) {
      item = itemList[_j];
      items.push(new Cls(item));
    }
  }
  page.items = new ItemSet(items);
  for (_k = 0, _len2 = items.length; _k < _len2; _k++) {
    item = items[_k];
    item.page = page;
  }
  return page.memberships = new Memberships(response.memberships);
};

Page = (function(_super) {

  __extends(Page, _super);

  function Page() {
    this.getAbsoluteUrl = __bind(this.getAbsoluteUrl, this);

    this.getAffiliation = __bind(this.getAffiliation, this);

    this.receiveUpdate = __bind(this.receiveUpdate, this);

    this.unsubscribe = __bind(this.unsubscribe, this);

    this.subscribe = __bind(this.subscribe, this);

    this.toJSON = __bind(this.toJSON, this);
    return Page.__super__.constructor.apply(this, arguments);
  }

  Page.shortName = 'page';

  Page.prototype.toJSON = function() {
    var data;
    data = _.clone(this.attributes);
    delete data.type;
    delete data.items;
    delete data.owner;
    return data;
  };

  Page.prototype.subscribe = function() {
    var _this = this;
    if (this.id) {
      log("Page trying to subscribe");
      return API.subscribePage(this.id, this.receiveUpdate);
    } else {
      log("Page waiting to subscribe");
      return this.once('change:id', function() {
        return API.subscribePage(_this.id, _this.receiveUpdate);
      });
    }
  };

  Page.prototype.unsubscribe = function() {
    log("Page trying to unsubscribe");
    return API.unsubscribePage(this.id, this.receiveUpdate);
  };

  Page.prototype.receiveUpdate = function(type, data) {
    var Cls, existing, item, modelData, singleEvent, _i, _len, _results;
    log("Page.receiveUpdate called with", type, data);
    if (type === 'multi-event') {
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        singleEvent = data[_i];
        _results.push(this.receiveUpdate(singleEvent.type, singleEvent.data));
      }
      return _results;
    } else {
      existing = this.items.get(data.id);
      if (type === 'item-update') {
        if (!existing) {
          return;
        }
        modelData = data.model_data;
        existing.set(modelData);
        existing.view.updateView();
        return this.trigger('external-item-updated', existing, data.creator_username, data.creator_identifier);
      } else if (type === 'item-add') {
        if (existing) {
          return;
        }
        Cls = {
          embed: EmbedItem,
          text: TextItem,
          image: ImageItem
        }[data.type];
        modelData = data.model_data;
        item = new Cls(modelData);
        item.page = this;
        this.items.add(item);
        return this.trigger('external-item-added', item, data.creator_username, data.creator_identifier);
      } else if (type === 'item-delete') {
        if (!existing) {
          return;
        }
        return existing.view["delete"](false);
      } else if (type === 'page-update') {
        return this.set(data);
      } else if (type === 'page-delete') {
        log("PAGE DELETED");
        return this.trigger('page-deleted');
      } else {
        throw new Error("Unknown update type");
      }
    }
  };

  Page.prototype.getAffiliation = function(user) {
    var foundUser, memberships, ownerId, userId;
    if (!user) {
      return AFFILIATIONS.NONE;
    }
    if (!this.owner) {
      return AFFILIATIONS.NONE;
    }
    ownerId = parseInt(this.owner.id);
    if (user instanceof User) {
      userId = parseInt(user.id);
    } else {
      assert(_.isNumber(user));
      userId = user;
    }
    if (ownerId === userId) {
      return AFFILIATIONS.OWNER;
    }
    memberships = this.memberships;
    foundUser = memberships.where({
      user_id: userId
    });
    if (foundUser.length) {
      return AFFILIATIONS.MEMBER;
    } else {
      return AFFILIATIONS.NONE;
    }
  };

  Page.prototype.getAbsoluteUrl = function() {
    var owner, pageIdentifier, path, username;
    owner = this.owner;
    if (owner != null ? owner.id : void 0) {
      pageIdentifier = this.get('short_url') || this.id;
      username = owner.get('username');
      assert(username);
      path = "/" + username + "/" + pageIdentifier + "/";
    } else {
      path = "/page/" + this.id + "/";
    }
    return qualifyURL(path);
  };

  return Page;

})(JotLeafModel);

Item = (function(_super) {

  __extends(Item, _super);

  function Item() {
    this.getPoint = __bind(this.getPoint, this);

    this.getAbsoluteUrl = __bind(this.getAbsoluteUrl, this);

    this.getCreatorAffiliation = __bind(this.getCreatorAffiliation, this);

    this.toJSON = __bind(this.toJSON, this);
    return Item.__super__.constructor.apply(this, arguments);
  }

  Item.prototype.toJSON = function() {
    var data;
    data = _.clone(this.attributes);
    data.page_id = this.page.id;
    data.socket_id = API.socketID();
    return data;
  };

  Item.prototype.getCreatorAffiliation = function() {
    return this.page.getAffiliation(this.get('creator_id'));
  };

  Item.prototype.getAbsoluteUrl = function() {
    if (!this.id) {
      return "No URL yet — save this item first.";
    }
    return this.page.getAbsoluteUrl() + ("item-" + this.id + "/");
  };

  Item.prototype.getPoint = function() {
    return [this.get('x'), this.get('y')];
  };

  return Item;

})(JotLeafModel);

TextItem = (function(_super) {

  __extends(TextItem, _super);

  function TextItem() {
    return TextItem.__super__.constructor.apply(this, arguments);
  }

  TextItem.shortName = 'textitem';

  return TextItem;

})(Item);

ImageItem = (function(_super) {

  __extends(ImageItem, _super);

  function ImageItem() {
    return ImageItem.__super__.constructor.apply(this, arguments);
  }

  ImageItem.shortName = 'imageitem';

  return ImageItem;

})(Item);

EmbedItem = (function(_super) {

  __extends(EmbedItem, _super);

  function EmbedItem() {
    return EmbedItem.__super__.constructor.apply(this, arguments);
  }

  EmbedItem.shortName = 'embeditem';

  return EmbedItem;

})(Item);

UserFollows = (function(_super) {

  __extends(UserFollows, _super);

  function UserFollows() {
    this.setFollows = __bind(this.setFollows, this);

    this.checkFollows = __bind(this.checkFollows, this);

    this.initialize = __bind(this.initialize, this);
    return UserFollows.__super__.constructor.apply(this, arguments);
  }

  UserFollows.prototype.model = Follow;

  UserFollows.prototype.initialize = function(models, options) {
    this.options = options;
    return assert(this.options.key);
  };

  UserFollows.prototype.checkFollows = function(user) {
    return Boolean(this.where({
      target_id: user.id
    }).length);
  };

  UserFollows.prototype.setFollows = function(user, value) {
    var f, model, target_id, _i, _len, _ref, _results;
    assert(this.options.key);
    target_id = user.id;
    value = Boolean(value);
    if (value === this.checkFollows(user)) {
      return;
    }
    if (value) {
      f = new Follow({
        user_id: this.options.key,
        target_id: target_id
      });
      f.save();
      mixpanel.track("Follow");
      return this.add(f);
    } else {
      _ref = this.where({
        target_id: target_id
      });
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        _results.push(model.destroy());
      }
      return _results;
    }
  };

  return UserFollows;

})(Backbone.Collection);

Follow = (function(_super) {

  __extends(Follow, _super);

  function Follow() {
    return Follow.__super__.constructor.apply(this, arguments);
  }

  Follow.shortName = 'follow';

  Follow.collectBy = 'user_id';

  Follow.CollectionClass = UserFollows;

  return Follow;

})(JotLeafModel);

NewsFeedListing = (function(_super) {

  __extends(NewsFeedListing, _super);

  function NewsFeedListing() {
    this._generatePseudoId = __bind(this._generatePseudoId, this);

    this.initialize = __bind(this.initialize, this);
    return NewsFeedListing.__super__.constructor.apply(this, arguments);
  }

  NewsFeedListing.prototype.initialize = function(listing) {
    return this.id = this._generatePseudoId(listing);
  };

  NewsFeedListing.prototype._generatePseudoId = function(listing) {
    var id;
    switch (listing.type) {
      case 'text':
      case 'image':
      case 'embed':
      case 'page':
        return id = "" + listing.type + "-" + listing.data.id;
      case 'membership':
        return id = "" + listing.type + "-" + listing.data.page_id;
      case 'follow':
        return id = "" + listing.type + "-" + listing.data.user_id;
      default:
        return id = "" + listing.type + "-" + listing.data.id;
    }
  };

  return NewsFeedListing;

})(Backbone.Model);

NewsFeed = (function(_super) {

  __extends(NewsFeed, _super);

  function NewsFeed() {
    this.receiveUpdate = __bind(this.receiveUpdate, this);

    this.unsubscribe = __bind(this.unsubscribe, this);

    this.subscribe = __bind(this.subscribe, this);

    this.comparator = __bind(this.comparator, this);
    return NewsFeed.__super__.constructor.apply(this, arguments);
  }

  NewsFeed.prototype.model = NewsFeedListing;

  NewsFeed.prototype.comparator = function(l1, l2) {
    var t1, t2;
    t1 = l1.get('timestamp');
    t2 = l2.get('timestamp');
    if (t1 === t2) {
      return 0;
    } else if (t1 > t2) {
      return -1;
    } else {
      return 1;
    }
  };

  NewsFeed.prototype.subscribe = function() {
    var userId;
    assert(JL.AuthState.isAuthenticated());
    userId = JL.AuthState.getUserId();
    return API.subscribeUser(userId, this.receiveUpdate);
  };

  NewsFeed.prototype.unsubscribe = function() {
    var userId;
    userId = JL.AuthState.getUserId();
    log("Newsfeed unsubscribing from user-" + userId);
    return API.unsubscribeUser(userId, this.receiveUpdate);
  };

  NewsFeed.prototype.receiveUpdate = function(eventName, listing) {
    var newsFeedListing;
    newsFeedListing = new NewsFeedListing(listing);
    if (eventName === 'nf-delete') {
      return this.remove(newsFeedListing);
    } else {
      return this.update(newsFeedListing, {
        prepend: true,
        remove: false
      });
    }
  };

  return NewsFeed;

})(Backbone.Collection);

RejectedFollowSuggestion = (function(_super) {

  __extends(RejectedFollowSuggestion, _super);

  function RejectedFollowSuggestion() {
    return RejectedFollowSuggestion.__super__.constructor.apply(this, arguments);
  }

  RejectedFollowSuggestion.shortName = 'rejectedfollowsuggestion';

  return RejectedFollowSuggestion;

})(JotLeafModel);
