// Generated by CoffeeScript 1.4.0

rivets.configure({
  prefix: 'rv',
  adapter: {
    subscribe: function(obj, keypath, callback) {
      assert(obj instanceof Backbone.Model);
      callback.wrapped = function(m, v) {
        return callback(v);
      };
      return obj.on("change:" + keypath, callback.wrapped);
    },
    unsubscribe: function(obj, keypath, callback) {
      return obj.off("change:" + keypath, callback.wrapped);
    },
    read: function(obj, keypath) {
      return obj.get(keypath);
    },
    publish: function(obj, keypath, value) {
      log("editing", keypath, value);
      return typeof obj.edit === "function" ? obj.edit(keypath, value) : void 0;
    }
  }
});

rivets.binders.bg_color = function(el, value) {
  return $(el).css('background-color', value);
};

rivets.binders.bg_image = function(el, value) {
  return $(el).css('background-image', "url(" + value + ")");
};

rivets.binders.color = function(el, value) {
  return $(el).css('color', value);
};

rivets.binders.font_size = function(el, value) {
  if (value) {
    if (!_.isNumber(value)) {
      value = parseInt(value, 10);
    }
    assert(_.isNumber(value));
    return $(el).css('font-size', "" + value + "px");
  } else {
    return $(el).css('font-size', '');
  }
};

rivets.binders.font_face = function(el, value) {
  return $(el).css('font-family', value);
};

rivets.binders.fontlistitem = function(el, value) {
  var $el;
  $el = $(el);
  $el.data('font-family', value.family);
  return $el.text(value.displayName);
};

rivets.binders.selected = function(el, value) {
  if (value === $(el).val()) {
    return $(el).attr('selected', true);
  }
};

rivets.binders.slideshow = function(el, value) {
  var $el;
  $el = $(el);
  if (value) {
    return $(el).show('slideDown');
  } else if (!$el.is(':visible')) {
    return rivets.binders.show(el, value);
  } else {
    return $(el).hide('slideDown');
  }
};

rivets.binders.slidehide = function(el, value) {
  return rivets.binders.slideshow(el, !value);
};
