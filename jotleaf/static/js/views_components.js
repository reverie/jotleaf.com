// Generated by CoffeeScript 1.4.0
var ActivityView, ClaimsView, EmbedItemOptionsView, EmbedItemView, ErrorsView, ImageItemOptionsView, ImageItemView, ItemEditor, ItemView, MembersView, MessagesView, MiniMapView, NewsFeedBaseListingView, NewsFeedEmbedListingView, NewsFeedFollowListingView, NewsFeedImageListingView, NewsFeedMembershipListingView, NewsFeedPageListingView, NewsFeedTextListingView, NewsFeedView, OptionsView, PageOptionsView, PageView, Pane, ProfilePageListView, SuggestedFollowView, SuggestedFollowsView, TextItemOptionsView, TextItemView, TutorialView, YourPages,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

MembersView = (function(_super) {

  __extends(MembersView, _super);

  function MembersView() {
    this._deleteItem = __bind(this._deleteItem, this);

    this._addItem = __bind(this._addItem, this);

    this._initRenderList = __bind(this._initRenderList, this);

    this.render = __bind(this.render, this);

    this._cacheMembers = __bind(this._cacheMembers, this);

    this._getMemberships = __bind(this._getMemberships, this);
    return MembersView.__super__.constructor.apply(this, arguments);
  }

  MembersView.prototype.className = "memberlist";

  MembersView.prototype.initialize = function(options) {
    this.template = options.template;
    return this.pageId = options.pageId;
  };

  MembersView.prototype._getMemberships = function(pageId) {
    var arrayDfd,
      _this = this;
    arrayDfd = Database.modelDB(Membership).filterFetchBy('page_id', pageId);
    return $.Deferred(function(dfd) {
      return arrayDfd.done(function(instanceList) {
        return dfd.resolve(new Memberships(instanceList));
      });
    });
  };

  MembersView.prototype._cacheMembers = function(memberships) {
    var uids;
    uids = memberships.pluck('user_id');
    return Database.modelDB(User).fetchList(uids);
  };

  MembersView.prototype.render = function() {
    var _this = this;
    this.$el.html(this.template());
    this.progress = this.$('.progress');
    this.memberList = this.$('.memberlist');
    return this._getMemberships(this.pageId).done(function(memberships) {
      _this.memberships = memberships;
      return _this._cacheMembers(_this.memberships).done(_this._initRenderList);
    });
  };

  MembersView.prototype._initRenderList = function() {
    var tokenValues, udb,
      _this = this;
    log("initrenderlist");
    tokenValues = [];
    udb = Database.modelDB(User);
    tokenValues = this.memberships.map(function(m) {
      var u;
      u = udb.get(m.get('user_id'));
      return {
        id: u.id,
        name: u.get('username'),
        membership_id: m.id
      };
    });
    log("prepopulating with", tokenValues);
    return this.memberList.tokenInput("/xhr/autocomplete_username/", {
      queryParam: 'term',
      searchDelay: 50,
      prePopulate: tokenValues,
      hintText: "Type in a username",
      theme: 'jotleaf',
      tokenLimit: 12,
      preventDuplicates: true,
      onAdd: this._addItem,
      onDelete: this._deleteItem
    });
  };

  MembersView.prototype._addItem = function(item) {
    var addDfd, m, username,
      _this = this;
    log("adding", item);
    username = item.name;
    this.progress.text("Adding " + username + "...");
    addDfd = $.Deferred();
    addDfd.done(function(m) {
      assert(m instanceof Membership);
      item.membership_id = m.id;
      _this.memberships.add(m);
      return _this.progress.text("Added " + username + "!");
    });
    addDfd.fail(function(opt_reason) {
      var msg;
      msg = "Couldn't add '" + username + "'";
      if (opt_reason) {
        msg += ":  " + opt_reason;
      }
      return _this.progress.text(msg);
    });
    addDfd.always(function() {});
    m = new Membership({
      user_id: item.id,
      page_id: this.pageId
    });
    return m.save().done(function() {
      return addDfd.resolve(m);
    }).fail(addDfd.reject);
  };

  MembersView.prototype._deleteItem = function(item) {
    var m, remDfd, username,
      _this = this;
    log("removing", item);
    username = item.name;
    this.progress.text("Removing " + username + "...");
    remDfd = $.Deferred();
    remDfd.done(function(m) {
      assert(m instanceof Membership);
      return _this.progress.text("Removed " + username);
    });
    remDfd.fail(function() {
      var msg;
      msg = "ERROR: Couldn't remove '" + username + "'";
      return _this.progress.text(msg);
    });
    remDfd.always(function() {});
    m = this.memberships.where({
      user_id: item.id
    })[0];
    return m.destroy({
      wait: true
    }).done(function() {
      return remDfd.resolve(m);
    }).fail(remDfd.reject);
  };

  return MembersView;

})(JLView);

OptionsView = (function(_super) {

  __extends(OptionsView, _super);

  function OptionsView() {
    this.unbind = __bind(this.unbind, this);

    this.toggle = __bind(this.toggle, this);

    this.hide = __bind(this.hide, this);

    this.show = __bind(this.show, this);

    this._errBack = __bind(this._errBack, this);

    this._setContent = __bind(this._setContent, this);

    this._setPage = __bind(this._setPage, this);

    this.render = __bind(this.render, this);
    return OptionsView.__super__.constructor.apply(this, arguments);
  }

  OptionsView.prototype.className = "optionsbox-outer clearfix";

  OptionsView.prototype.initialize = function(options) {
    var pageDfd;
    pageDfd = Database.modelDB(Page).fetch(options.pageId);
    return pageDfd.done(this._setPage).fail(this._errBack("Error loading! Refresh the page and try again."));
  };

  OptionsView.prototype.render = function() {
    this.content = $('<div>').addClass('optionsbox').appendTo(this.$el);
    if (this.page) {
      this._setContent();
    } else {
      this.content.text('Loading...');
      this.once('gotpage', this._setContent);
      return;
    }
    return log("Rendered element", this.$el);
  };

  OptionsView.prototype._setPage = function(page) {
    this.page = page;
    return this.trigger('gotpage');
  };

  OptionsView.prototype._setContent = function() {
    var clearBtn, clearConfirm, clearConfirmNo, clearConfirmYes, clearProgress, closeBtn, deleteBtn, deleteConfirm, deleteConfirmNo, deleteConfirmYes, image_writability, image_writabilityVal, members, publishedCheckbox, text_writability, text_writabilityVal, title,
      _this = this;
    this.content.html(ich.tpl_page_options());
    title = this.$('input.title');
    title.val(this.page.get('title'));
    this.listenTo(title, 'change keyup paste', function() {
      _this.page.edit('title', title.val());
      return _this.options.row.find('.page-title').text(title.val());
    });
    members = this.$findOne('.members');
    new MembersView({
      el: members,
      pageId: this.options.pageId,
      template: ich.tpl_page_members
    }).render();
    text_writability = this.$('select[name=text_writability]');
    text_writabilityVal = parseInt(this.page.get('text_writability'));
    assert(__indexOf.call(_.values(PERMISSIONS), text_writabilityVal) >= 0);
    text_writability.val(text_writabilityVal);
    this.listenTo(text_writability, 'change', function() {
      var newVal;
      newVal = parseInt(text_writability.val());
      log("text_writability val changed", newVal);
      assert(__indexOf.call(_.values(PERMISSIONS), newVal) >= 0);
      return _this.page.edit('text_writability', newVal);
    });
    image_writability = this.$('select[name=image_writability]');
    image_writabilityVal = parseInt(this.page.get('image_writability'));
    assert(__indexOf.call(_.values(PERMISSIONS), image_writabilityVal) >= 0);
    image_writability.val(image_writabilityVal);
    this.listenTo(image_writability, 'change', function() {
      var newVal;
      newVal = parseInt(image_writability.val());
      log("image_writability val changed", newVal);
      assert(__indexOf.call(_.values(PERMISSIONS), newVal) >= 0);
      return _this.page.edit('image_writability', newVal);
    });
    publishedCheckbox = this.$findOne('.published');
    this._checkBoxButton = new CheckboxButton(publishedCheckbox, {
      model: this.page,
      attribute: 'published'
    });
    clearBtn = this.$findOne('input.clear');
    clearConfirm = this.$findOne('.clear_confirm');
    clearProgress = this.$findOne('.clear_progress');
    this.listenTo(clearBtn, 'click', function() {
      clearBtn.hide();
      clearConfirm.show();
      return clearProgress.hide();
    });
    clearConfirmYes = this.$findOne('.clear_confirm .yes');
    this.listenTo(clearConfirmYes, 'click', function() {
      var dfd;
      dfd = API.instanceMethod(_this.page, 'clear');
      clearConfirm.hide();
      clearProgress.text('Clearing...').show();
      dfd.fail(function() {
        return clearProgress.text("Couldn't clear the page. Please refresh and try again.");
      });
      return dfd.done(function() {
        clearProgress.text("Page cleared!");
        return clearBtn.show();
      });
    });
    clearConfirmNo = this.$findOne('.clear_confirm .no');
    this.listenTo(clearConfirmNo, 'click', function() {
      clearBtn.show();
      return clearConfirm.hide();
    });
    deleteBtn = this.$findOne('input.delete');
    deleteConfirm = this.$findOne('.delete_confirm');
    this.listenTo(deleteBtn, 'click', function() {
      deleteBtn.hide();
      return deleteConfirm.show();
    });
    deleteConfirmYes = this.$findOne('.delete_confirm .yes');
    this.listenTo(deleteConfirmYes, 'click', function() {
      _this.$el.empty().text('Deleting...');
      return _this.page.destroy({
        success: function() {
          _this.hide();
          return _this.options.row.hide();
        },
        error: _this._errBack('Error deleting! Refresh the page and try again.')
      });
    });
    deleteConfirmNo = this.$findOne('.delete_confirm .no');
    this.listenTo(deleteConfirmNo, 'click', function() {
      deleteBtn.show();
      return deleteConfirm.hide();
    });
    closeBtn = this.$('input[name=close]');
    return this.listenTo(closeBtn, 'click', this.hide);
  };

  OptionsView.prototype._errBack = function(msg) {
    var _this = this;
    return (function() {
      return _this.content.empty().text(msg);
    });
  };

  OptionsView.prototype.show = function() {
    var speed, target;
    this._visible = true;
    if (this._lastHeight) {
      target = this._lastHeight + 'px';
      speed = 'fast';
    } else {
      target = '999px';
      speed = 'slow';
    }
    return this.$el.animate({
      'max-height': target
    }, speed, 'linear');
  };

  OptionsView.prototype.hide = function() {
    this._visible = false;
    this._lastHeight = this.$el.outerHeight();
    this.$el.css('maxHeight', this._lastHeight);
    return this.$el.animate({
      'max-height': '0px'
    }, 'fast', 'linear');
  };

  OptionsView.prototype.toggle = function() {
    if (this._visible) {
      return this.hide();
    } else {
      return this.show();
    }
  };

  OptionsView.prototype.unbind = function() {
    var _ref;
    return (_ref = this._checkBoxButton) != null ? _ref.destroy() : void 0;
  };

  return OptionsView;

})(JLView);

MessagesView = (function(_super) {

  __extends(MessagesView, _super);

  function MessagesView() {
    this.showMessages = __bind(this.showMessages, this);
    return MessagesView.__super__.constructor.apply(this, arguments);
  }

  MessagesView.prototype.showMessages = function(messages, type) {
    var content;
    if (!messages.length) {
      return;
    }
    log("messages view showing", messages);
    content = ich.tpl_messages({
      messages: messages
    });
    return this.$el.empty().append(content).show();
  };

  return MessagesView;

})(JLView);

ClaimsView = (function(_super) {

  __extends(ClaimsView, _super);

  function ClaimsView() {
    this.forgetPage = __bind(this.forgetPage, this);

    this.claimPage = __bind(this.claimPage, this);

    this._gotClaims = __bind(this._gotClaims, this);
    return ClaimsView.__super__.constructor.apply(this, arguments);
  }

  ClaimsView.prototype.initialize = function() {
    var claims,
      _this = this;
    claims = API.xhrMethod('get-claims');
    claims.done(this._gotClaims);
    this.$el.toggle(JL.AuthState.isAuthenticated());
    return this.listenTo(JL.AuthState, 'change', function() {
      log("TOGGLING!");
      return _this.$el.toggle(JL.AuthState.isAuthenticated());
    });
  };

  ClaimsView.prototype.events = {
    'click span.add': 'claimPage',
    'click span.forget': 'forgetPage'
  };

  ClaimsView.prototype._gotClaims = function(pages) {
    var content;
    if (!pages.length) {
      return;
    }
    content = ich.tpl_claim_notifications({
      pages: pages
    });
    return this.$el.append(content).show();
  };

  ClaimsView.prototype.claimPage = function(e) {
    var claim, data,
      _this = this;
    data = {
      page_id: $(e.target).data('page-id')
    };
    claim = API.xhrMethod('claim-yes', data);
    return claim.done(function() {
      return window.location.pathname = URLs.pages;
    });
  };

  ClaimsView.prototype.forgetPage = function(e) {
    var claim, data,
      _this = this;
    data = {
      page_id: $(e.target).data('page-id')
    };
    claim = API.xhrMethod('claim-no', data);
    return claim.done(function() {
      return window.location.pathname = URLs.pages;
    });
  };

  return ClaimsView;

})(JLView);

ErrorsView = (function() {

  ErrorsView.prototype.DJANGO_NON_FIELD_KEY = '__all__';

  ErrorsView.prototype.inputWithErrorsClass = 'input-with-errors';

  function ErrorsView(formEl, nonFieldEl) {
    this.requestFailed = __bind(this.requestFailed, this);

    this._showNonFieldErrors = __bind(this._showNonFieldErrors, this);

    this._showFieldErrors = __bind(this._showFieldErrors, this);

    this.showErrors = __bind(this.showErrors, this);

    this.clearErrors = __bind(this.clearErrors, this);

    var _this = this;
    this._fields = {};
    $(formEl).find('input').each(function(index, value) {
      var name;
      name = $(value).attr('name');
      if (name) {
        return _this._fields[name] = $(value);
      }
    });
    this._formEl = formEl;
    this._nonFieldContainer = nonFieldEl;
  }

  ErrorsView.prototype.clearErrors = function() {
    $(this._nonFieldContainer).empty().hide();
    $(this._formEl).find('.errors').remove();
    return $(this._formEl).find('input').removeClass(this.inputWithErrorsClass);
  };

  ErrorsView.prototype.showErrors = function(errors) {
    var fieldErrors, nonFieldErrors;
    if (!errors) {
      return;
    }
    fieldErrors = _.omit(errors, [this.DJANGO_NON_FIELD_KEY]);
    this._showFieldErrors(fieldErrors);
    nonFieldErrors = errors[this.DJANGO_NON_FIELD_KEY];
    if (nonFieldErrors) {
      return this._showNonFieldErrors(nonFieldErrors);
    }
  };

  ErrorsView.prototype._showFieldErrors = function(errorMap) {
    var errorView, errors_to_show, fieldName, field_errors, inputEl, _results;
    _results = [];
    for (fieldName in errorMap) {
      field_errors = errorMap[fieldName];
      inputEl = this._fields[fieldName];
      assert(inputEl.length, "could not find formfield " + fieldName);
      inputEl.addClass(this.inputWithErrorsClass);
      errors_to_show = field_errors.slice(0, 1);
      errorView = ich.tpl_errors({
        errors: errors_to_show
      });
      _results.push(inputEl.parent().append(errorView));
    }
    return _results;
  };

  ErrorsView.prototype._showNonFieldErrors = function(errorList) {
    var content;
    if (!errorList && errorList.length) {
      return;
    }
    content = ich.tpl_errors({
      errors: errorList
    });
    return $(this._nonFieldContainer).empty().append(content).show();
  };

  ErrorsView.prototype.requestFailed = function(msg) {
    var errors;
    errors = F.obj(this.DJANGO_NON_FIELD_KEY, [msg]);
    return this.showErrors(errors);
  };

  return ErrorsView;

})();

YourPages = (function(_super) {

  __extends(YourPages, _super);

  function YourPages() {
    this.initialize = __bind(this.initialize, this);
    return YourPages.__super__.constructor.apply(this, arguments);
  }

  YourPages.prototype.initialize = function() {
    var messages, msg,
      _this = this;
    this.$el.append(ich.tpl_your_pages());
    msg = this.$findOne('.msg');
    messages = API.xhrMethod('my-pages');
    return messages.done(function(response) {
      var context, pages;
      if (response.success) {
        pages = response.data;
        if (!pages.length) {
          msg.text('Create a page to get started');
          return;
        }
        context = {
          pages: pages,
          truncatedContent: _this.contextToArg(_this._truncatedContent),
          isYou: _this.contextToArg(_this._isYou),
          viewsWord: function() {
            if (this.view_count === 1) {
              return 'View';
            } else {
              return 'Views';
            }
          }
        };
        _this.$el.empty();
        _this.$el.append(ich.tpl_your_pages_list(context));
        return _this.$('.timeago').timeago();
      } else if (response.status_code === 403) {
        JL.AuthState.setUser(null);
        _this.options.topView.queueSuccessMessage("You have been logged out. Please login again.");
        return router._redirect('account/login/');
      }
    });
  };

  return YourPages;

})(JLView);

NewsFeedBaseListingView = (function(_super) {

  __extends(NewsFeedBaseListingView, _super);

  function NewsFeedBaseListingView() {
    this.render = __bind(this.render, this);

    this._getSpecificContext = __bind(this._getSpecificContext, this);

    this._getBaseContext = __bind(this._getBaseContext, this);
    return NewsFeedBaseListingView.__super__.constructor.apply(this, arguments);
  }

  NewsFeedBaseListingView.prototype._getBaseContext = function() {
    var context;
    return context = {
      user: this.model.get('user'),
      time: this.model.get('timestamp')
    };
  };

  NewsFeedBaseListingView.prototype._getSpecificContext = function() {
    return {};
  };

  NewsFeedBaseListingView.prototype.render = function() {
    var baseContext, context, listingEl, specificContext;
    baseContext = this._getBaseContext();
    specificContext = this._getSpecificContext();
    context = _.extend(baseContext, specificContext);
    log("rendering " + (this.model.get('type')) + " listing with context:", context);
    listingEl = ich.tpl_news_feed_listing(context);
    this._listingContent = listingEl.findOne('.news-feed-listing-content');
    if (this.template) {
      this.template(context).appendTo(this._listingContent);
    }
    this.setElement(listingEl);
    return this;
  };

  return NewsFeedBaseListingView;

})(JLView);

NewsFeedTextListingView = (function(_super) {

  __extends(NewsFeedTextListingView, _super);

  function NewsFeedTextListingView() {
    this._updateTextContent = __bind(this._updateTextContent, this);

    this._getSpecificContext = __bind(this._getSpecificContext, this);

    this.initialize = __bind(this.initialize, this);
    return NewsFeedTextListingView.__super__.constructor.apply(this, arguments);
  }

  NewsFeedTextListingView.prototype.initialize = function() {
    this.template = ich.tpl_nf_content_text;
    return this.listenTo(this.model, 'change:data', this._updateTextContent);
  };

  NewsFeedTextListingView.prototype._getSpecificContext = function() {
    var textContext;
    return textContext = {
      message: "wrote",
      truncatedContent: this._truncatedContent(this.model.get('data'), 300),
      page: this.model.get('page'),
      contentUrl: this.model.get('data').get_absolute_url,
      isYou: this._isYou(this.model.get('page'))
    };
  };

  NewsFeedTextListingView.prototype._updateTextContent = function(model) {
    var textEl;
    log("updating text content", model);
    textEl = this.$el.findOne('.text-content');
    return textEl.empty().append(model.changed.data.content);
  };

  return NewsFeedTextListingView;

})(NewsFeedBaseListingView);

NewsFeedImageListingView = (function(_super) {

  __extends(NewsFeedImageListingView, _super);

  function NewsFeedImageListingView() {
    this._getSpecificContext = __bind(this._getSpecificContext, this);

    this.initialize = __bind(this.initialize, this);
    return NewsFeedImageListingView.__super__.constructor.apply(this, arguments);
  }

  NewsFeedImageListingView.prototype.initialize = function() {
    return this.template = ich.tpl_nf_content_image;
  };

  NewsFeedImageListingView.prototype._getSpecificContext = function() {
    var imageContext;
    return imageContext = {
      message: "posted an image",
      page: this.model.get('page'),
      contentUrl: this.model.get('data').get_absolute_url,
      src: this.model.get('data').src,
      isYou: this._isYou(this.model.get('page'))
    };
  };

  return NewsFeedImageListingView;

})(NewsFeedBaseListingView);

NewsFeedEmbedListingView = (function(_super) {

  __extends(NewsFeedEmbedListingView, _super);

  function NewsFeedEmbedListingView() {
    this._getSpecificContext = __bind(this._getSpecificContext, this);

    this.initialize = __bind(this.initialize, this);
    return NewsFeedEmbedListingView.__super__.constructor.apply(this, arguments);
  }

  NewsFeedEmbedListingView.prototype.initialize = function() {
    return this.template = ich.tpl_nf_content_embed;
  };

  NewsFeedEmbedListingView.prototype._getSpecificContext = function() {
    var embedContext, embedly_data, msg, provider;
    embedly_data = JSON.parse(this.model.get('data').embedly_data);
    provider = embedly_data.provider_name;
    if (provider) {
      msg = "posted a " + provider + " embed";
    } else {
      msg = "posted an embed";
    }
    return embedContext = {
      message: msg,
      page: this.model.get('page'),
      contentUrl: this.model.get('data').get_absolute_url,
      embedlyData: embedly_data,
      isYou: this._isYou(this.model.get('page'))
    };
  };

  return NewsFeedEmbedListingView;

})(NewsFeedBaseListingView);

NewsFeedMembershipListingView = (function(_super) {

  __extends(NewsFeedMembershipListingView, _super);

  function NewsFeedMembershipListingView() {
    this._getSpecificContext = __bind(this._getSpecificContext, this);

    this.initialize = __bind(this.initialize, this);
    return NewsFeedMembershipListingView.__super__.constructor.apply(this, arguments);
  }

  NewsFeedMembershipListingView.prototype.initialize = function() {
    return this.template = ich.tpl_nf_content_membership;
  };

  NewsFeedMembershipListingView.prototype._getSpecificContext = function() {
    var membershipContext;
    return membershipContext = {
      message: "added you as a member",
      page: this.model.get('page')
    };
  };

  return NewsFeedMembershipListingView;

})(NewsFeedBaseListingView);

NewsFeedFollowListingView = (function(_super) {

  __extends(NewsFeedFollowListingView, _super);

  function NewsFeedFollowListingView() {
    this._getSpecificContext = __bind(this._getSpecificContext, this);

    this.initialize = __bind(this.initialize, this);
    return NewsFeedFollowListingView.__super__.constructor.apply(this, arguments);
  }

  NewsFeedFollowListingView.prototype.initialize = function() {
    return this.template = ich.tpl_nf_content_follow;
  };

  NewsFeedFollowListingView.prototype._getSpecificContext = function() {
    var followContext;
    return followContext = {
      message: "is now following you",
      placeholder: "" + JL_CONFIG.STATIC_URL + "images/screenshot/screenshot_placeholder.png"
    };
  };

  return NewsFeedFollowListingView;

})(NewsFeedBaseListingView);

NewsFeedPageListingView = (function(_super) {

  __extends(NewsFeedPageListingView, _super);

  function NewsFeedPageListingView() {
    this._getSpecificContext = __bind(this._getSpecificContext, this);

    this.initialize = __bind(this.initialize, this);
    return NewsFeedPageListingView.__super__.constructor.apply(this, arguments);
  }

  NewsFeedPageListingView.prototype.initialize = function() {
    return this.template = ich.tpl_nf_content_page;
  };

  NewsFeedPageListingView.prototype._getSpecificContext = function() {
    var pageContext;
    return pageContext = {
      message: "has published a new page",
      page: this.model.get('page'),
      newPage: true
    };
  };

  return NewsFeedPageListingView;

})(NewsFeedBaseListingView);

NewsFeedView = (function(_super) {

  __extends(NewsFeedView, _super);

  function NewsFeedView() {
    this._removeNewsListing = __bind(this._removeNewsListing, this);

    this._insertNewsListing = __bind(this._insertNewsListing, this);

    this.initialize = __bind(this.initialize, this);
    return NewsFeedView.__super__.constructor.apply(this, arguments);
  }

  NewsFeedView.prototype.initialize = function() {
    var newsfeed,
      _this = this;
    this.listenTo(this.model, 'add', this._insertNewsListing);
    this.listenTo(this.model, 'remove', this._removeNewsListing);
    this.$el.append(ich.tpl_news_feed());
    newsfeed = API.xhrMethod('news-feed');
    return newsfeed.done(function(response) {
      var newsListing, _i, _len, _ref, _results;
      if (response.success) {
        _this.news = response.data;
        _this.$el.empty().append(ich.tpl_news_feed_list());
        _this.newsFeedList = _this.$findOne('.news-feed-list');
        _ref = _this.news;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          newsListing = _ref[_i];
          _results.push(_this.model.add(new NewsFeedListing(newsListing)));
        }
        return _results;
      } else if (response.status_code === 403) {
        JL.AuthState.setUser(null);
        _this.options.topView.queueSuccessMessage("You have been logged out. Please login again.");
        return router._redirect('account/login/');
      }
    });
  };

  NewsFeedView.prototype._insertNewsListing = function(listing, collection, options) {
    var View, insertedAt, listingEl, listingView, numListings, prepend, previousEl, previousListing, type, _ref;
    log("insert new listing", listing);
    type = listing.get('type');
    switch (type) {
      case 'text':
        View = NewsFeedTextListingView;
        break;
      case 'image':
        View = NewsFeedImageListingView;
        break;
      case 'embed':
        View = NewsFeedEmbedListingView;
        break;
      case 'membership':
        View = NewsFeedMembershipListingView;
        break;
      case 'follow':
        View = NewsFeedFollowListingView;
        break;
      case 'page':
        View = NewsFeedPageListingView;
        break;
      default:
        log("Unknown news listing type", listing.type);
    }
    if (View) {
      listingView = new View({
        model: listing
      });
      listingEl = listingView.render().$el;
      listing.view = listingView;
      prepend = options.prepend;
      if (prepend) {
        numListings = collection.length;
        insertedAt = collection.indexOf(listing);
        listingEl.css({
          maxHeight: 0
        });
        if (numListings === 0 || insertedAt === 0) {
          this.newsFeedList.prepend(listingEl);
        } else {
          previousListing = collection.at(insertedAt - 1);
          previousEl = (_ref = previousListing.view) != null ? _ref.$el : void 0;
          if (previousEl) {
            previousEl.after(listingEl);
          }
        }
        listingEl.animate({
          'max-height': '300px'
        }, 1000, 'linear');
      } else {
        this.newsFeedList.append(listingEl);
      }
      return this.$('.timeago').timeago();
    }
  };

  NewsFeedView.prototype._removeNewsListing = function(listing, collection, options) {
    var view,
      _this = this;
    log("remove listing", listing);
    view = listing.view;
    if (view) {
      return view.$el.animate({
        'max-height': '0'
      }, 500, 'linear', function() {
        return view.remove();
      });
    }
  };

  return NewsFeedView;

})(JLView);

ProfilePageListView = (function(_super) {

  __extends(ProfilePageListView, _super);

  function ProfilePageListView() {
    this._gotPages = __bind(this._gotPages, this);
    return ProfilePageListView.__super__.constructor.apply(this, arguments);
  }

  ProfilePageListView.prototype.initialize = function() {
    var data, pages,
      _this = this;
    this.$el.append(ich.tpl_loading_msg());
    data = {
      user_id: this.options.user.id
    };
    pages = API.xhrMethod('get-user-pages', data);
    pages.fail(function() {
      return _this.$findOne('.msg').text('Error loading — please refresh');
    });
    return pages.done(this._gotPages);
  };

  ProfilePageListView.prototype._gotPages = function(pages) {
    var context, msg, username, _i, _len, _results;
    this.$el.empty();
    if (!pages.length) {
      username = this.options.user.get('username');
      msg = $('<h3>').text("" + username + " hasn't created any pages yet");
      msg.appendTo(this.$el);
    }
    _results = [];
    for (_i = 0, _len = pages.length; _i < _len; _i++) {
      context = pages[_i];
      context.viewsWord = function() {
        if (this.view_count === 1) {
          return 'View';
        } else {
          return 'Views';
        }
      };
      _results.push(this.$el.append(ich.tpl_show_user_page_row(context)));
    }
    return _results;
  };

  return ProfilePageListView;

})(JLView);

ItemView = (function(_super) {

  __extends(ItemView, _super);

  function ItemView() {
    this.unbind = __bind(this.unbind, this);

    this._rmDraggable = __bind(this._rmDraggable, this);

    this._makeDraggable = __bind(this._makeDraggable, this);

    this._hideEditButton = __bind(this._hideEditButton, this);

    this._showEditButton = __bind(this._showEditButton, this);

    this._processLinkToURL = __bind(this._processLinkToURL, this);

    this._processWidth = __bind(this._processWidth, this);

    this._processHeight = __bind(this._processHeight, this);

    this._processSize = __bind(this._processSize, this);

    this.ondragstop = __bind(this.ondragstop, this);

    this.onresizestop = __bind(this.onresizestop, this);

    this.removeDeleteBtn = __bind(this.removeDeleteBtn, this);

    this.addDeleteBtn = __bind(this.addDeleteBtn, this);

    this.updateView = __bind(this.updateView, this);

    this.updatePosition = __bind(this.updatePosition, this);

    this.bindStateChangeHandlers = __bind(this.bindStateChangeHandlers, this);

    this._reverseFeatureMap = __bind(this._reverseFeatureMap, this);

    this._getTransitionHandlers = __bind(this._getTransitionHandlers, this);

    this._getFeatureMap = __bind(this._getFeatureMap, this);

    this["delete"] = __bind(this["delete"], this);

    this.setStateEngaged = __bind(this.setStateEngaged, this);

    this.setStateDeleted = __bind(this.setStateDeleted, this);

    this.setStateView = __bind(this.setStateView, this);

    this.setStateEdit = __bind(this.setStateEdit, this);

    this.setStateAdmin = __bind(this.setStateAdmin, this);

    this.getState = __bind(this.getState, this);

    this._setState = __bind(this._setState, this);

    this._handleHREF = __bind(this._handleHREF, this);

    this.render = __bind(this.render, this);

    this.initialize = __bind(this.initialize, this);
    return ItemView.__super__.constructor.apply(this, arguments);
  }

  ItemView.STATES = {
    ENGAGED: 'engaged',
    VIEW: 'view',
    EDIT: 'edit',
    ADMIN: 'admin',
    DELETED: 'deleted'
  };

  ItemView.prototype.initialize = function() {
    this.state = this.constructor.STATES.VIEW;
    this.$el.data('view', this);
    this.listenTo(this.model, 'change:x change:y', this.updatePosition);
    return this.events = _.extend({}, ItemView.prototype.events, this.events);
  };

  ItemView.prototype.events = {
    'click a': '_handleHREF'
  };

  ItemView.prototype.render = function() {
    this.listenTo(this.model, 'change:width', this._processWidth);
    this.listenTo(this.model, 'change:height', this._processHeight);
    if (Permissions.canEditItem(this.model)) {
      this.listenTo(this.$el, 'mouseenter', this._showEditButton);
      return this.listenTo(this.$el, 'mouseleave', this._hideEditButton);
    }
  };

  ItemView.prototype._handleHREF = function(e) {
    if (this.state !== this.constructor.STATES.VIEW) {
      return e.preventDefault();
    }
  };

  ItemView.prototype._setState = function(newstate) {
    var oldstate;
    oldstate = this.state;
    if (oldstate === newstate) {
      return;
    }
    if (oldstate === this.constructor.STATES.DELETED) {
      return;
    }
    this.state = newstate;
    return this.trigger('setstate', newstate, oldstate);
  };

  ItemView.prototype.getState = function() {
    return this.state;
  };

  ItemView.prototype.setStateAdmin = function() {
    return this._setState(this.constructor.STATES.ADMIN);
  };

  ItemView.prototype.setStateEdit = function() {
    return this._setState(this.constructor.STATES.EDIT);
  };

  ItemView.prototype.setStateView = function() {
    return this._setState(this.constructor.STATES.VIEW);
  };

  ItemView.prototype.setStateDeleted = function() {
    return this._setState(this.constructor.STATES.DELETED);
  };

  ItemView.prototype.setStateEngaged = function() {
    return this._setState(this.constructor.STATES.ENGAGED);
  };

  ItemView.prototype["delete"] = function(destroyModel) {
    var _this = this;
    if (destroyModel == null) {
      destroyModel = true;
    }
    log('delete called', this);
    if (destroyModel) {
      this.model.destroy();
    }
    this.pageView.model.items.remove(this.model);
    return this.$el.fadeOut(400, function() {
      _this.remove();
      return _this.setStateDeleted();
    });
  };

  ItemView.prototype._getFeatureMap = function() {
    return {};
  };

  ItemView.prototype._getTransitionHandlers = function() {
    return {};
  };

  ItemView.prototype._reverseFeatureMap = function(featureMap) {
    var featureName, rmap, state, stateList, _i, _len;
    rmap = {};
    for (featureName in featureMap) {
      stateList = featureMap[featureName];
      for (_i = 0, _len = stateList.length; _i < _len; _i++) {
        state = stateList[_i];
        rmap[state] || (rmap[state] = {});
        rmap[state][featureName] = true;
      }
    }
    return rmap;
  };

  ItemView.prototype.bindStateChangeHandlers = function() {
    var features, stateToFeatures, transitions,
      _this = this;
    features = this._getFeatureMap();
    stateToFeatures = this._reverseFeatureMap(features);
    this.listenTo(this, 'setstate', function(newstate) {
      var f, stateFeatures, _, _results;
      stateFeatures = stateToFeatures[newstate] || {};
      _results = [];
      for (f in features) {
        _ = features[f];
        if (stateFeatures[f]) {
          _results.push(_this._featureSwitch(f, 'on'));
        } else {
          _results.push(_this._featureSwitch(f, 'off'));
        }
      }
      return _results;
    });
    transitions = this._getTransitionHandlers();
    return this.listenTo(this, 'setstate', function(newstate, oldstate) {
      var handlerNewState, handlerOldState, methodName, _ref, _results;
      assert(newstate !== oldstate);
      if (!oldstate) {
        return;
      }
      _results = [];
      for (methodName in transitions) {
        _ref = transitions[methodName], handlerOldState = _ref[0], handlerNewState = _ref[1];
        if (handlerOldState !== 'any' && handlerOldState !== oldstate) {
          continue;
        }
        if (handlerNewState !== 'any' && handlerNewState !== newstate) {
          continue;
        }
        _results.push(_this[methodName]());
      }
      return _results;
    });
  };

  ItemView.prototype.updatePosition = function(item, newVal, options) {
    var currOffset, delta, newLeft, newTop,
      _this = this;
    delta = [0, 0];
    delta[0] = item.get('x') - item.previousAttributes()['x'];
    delta[1] = item.get('y') - item.previousAttributes()['y'];
    currOffset = this.$el.position();
    newTop = currOffset.top + delta[1];
    newLeft = currOffset.left + delta[0];
    if (options.instant) {
      return this.$el.css({
        top: newTop,
        left: newLeft
      });
    } else {
      return $.doTimeout("" + item.id + "-move", 100, function() {
        return _this.$el.animate({
          top: newTop,
          left: newLeft
        }, 300, 'swing');
      });
    }
  };

  ItemView.prototype.updateView = function() {
    return this.setStateView();
  };

  ItemView.prototype.addDeleteBtn = function() {
    if (this.deleteBtn) {
      return;
    }
    this.deleteBtn = ich.tpl_delete_btn(this.commonContext());
    this.$el.append(this.deleteBtn);
    return this.deleteBtn.css({
      marginRight: -(this.deleteBtn.outerWidth() / 2),
      marginTop: -(this.deleteBtn.outerHeight() / 2)
    }).attr('title', 'Delete');
  };

  ItemView.prototype.removeDeleteBtn = function() {
    var _ref;
    if ((_ref = this.deleteBtn) != null) {
      _ref.remove();
    }
    return this.deleteBtn = null;
  };

  ItemView.prototype.onresizestop = function(e, ui) {
    log("onresizestop");
    this.model.edit('height', ui.size.height);
    return this.model.edit('width', ui.size.width);
  };

  ItemView.prototype.ondragstop = function(e, ui) {
    var $pv, newScreenX, newScreenY, x, y, _ref, _ref1;
    log("ondragstop");
    $pv = this.pageView.$el;
    _ref = [ui.offset.left - $pv.offset().left, ui.offset.top - $pv.offset().top], newScreenX = _ref[0], newScreenY = _ref[1];
    _ref1 = this.pageView.surface.screenPixelsToCoords(newScreenX, newScreenY), x = _ref1[0], y = _ref1[1];
    this.model.edit('x', x, {
      silent: true
    });
    return this.model.edit('y', y, {
      silent: true
    });
  };

  ItemView.prototype._processSize = function() {
    this._processHeight();
    return this._processWidth();
  };

  ItemView.prototype._processHeight = function() {
    return this.$el.height(this.model.get('height') || '');
  };

  ItemView.prototype._processWidth = function() {
    var content, hasWidth, width;
    content = this.$('.content');
    width = this.model.get('width');
    this.$el.width(width || '');
    hasWidth = Boolean(width);
    content.toggleClass('with-width', hasWidth);
    return content.toggleClass('no-width', !hasWidth);
  };

  ItemView.prototype._processLinkToURL = function() {
    var aClass, aTag, content, link, url;
    url = $.trim(this.model.get('link_to_url'));
    if (url && !url.match(/^https?:\/\//)) {
      url = 'http://' + url;
    }
    content = this.$('.content');
    aClass = 'link-to-url';
    link = content.parent('.' + aClass);
    if (url) {
      if (link.length) {
        link.attr('href', url);
      } else {
        aTag = $("<a href='" + url + "' class='" + aClass + "'>");
        if (!testSameOrigin(url)) {
          aTag.attr('target', '_blank');
        }
        content.wrap(aTag);
      }
      return content.attr('title', "Link to " + url);
    } else if (link.length) {
      content.attr('title', '');
      return content.unwrap();
    }
  };

  ItemView.prototype._showEditButton = function() {
    var border, bottom, btn, padding, right, size, sizeRatio,
      _this = this;
    if (this.state !== this.constructor.STATES.VIEW) {
      return;
    }
    this._hideEditButton();
    btn = this._editButton = $("<img class='edit-btn'>");
    if (this.model.constructor.shortName === 'textitem') {
      border = parseInt(this.$el.css('border-bottom-width'));
      padding = parseInt(this.$el.css('padding-bottom'));
      size = this.$el.height() - 2 * padding - 2 * border;
      bottom = padding;
    } else {
      size = this.$el.height();
      bottom = 0;
    }
    size = clamp(size, 12, 36);
    btn.height(size).width(size);
    btn.css('bottom', bottom);
    sizeRatio = size / this.$el.height();
    if (sizeRatio <= 1 / 3) {
      right = 0;
    } else {
      right = -size;
    }
    btn.css('right', right);
    return this.pageView.getLuminance(function(l) {
      var color, src;
      color = l < .3 ? 'white' : 'black';
      src = "" + JL_CONFIG.STATIC_URL + "images/nounproject/gear_1241_" + color + "_shadowed.png";
      btn.attr('src', src);
      btn.hide();
      _this.$el.append(btn);
      return btn.delay(150).fadeIn();
    });
  };

  ItemView.prototype._hideEditButton = function() {
    var _ref;
    return (_ref = this._editButton) != null ? _ref.remove() : void 0;
  };

  ItemView.prototype._makeDraggable = function() {
    var g;
    if (this._grip) {
      return;
    }
    g = this._grip = $("<div class='grip item-ctrl'></div>");
    g.attr('title', 'Click & Drag');
    g.width(18);
    this.$el.append(g);
    g.css({
      left: -(g.width() + 2)
    });
    return this.$el.draggable({
      handle: g,
      start: function() {
        return g.css('cursor', 'move');
      },
      stop: function() {
        return g.css('cursor', 'pointer');
      }
    });
  };

  ItemView.prototype._rmDraggable = function() {
    var _ref;
    if ((_ref = this._grip) != null) {
      _ref.remove();
    }
    this._grip = null;
    if (this.$el.data('uiDraggable')) {
      return this.$el.draggable("destroy");
    }
  };

  ItemView.prototype.unbind = function() {
    return this._rmDraggable();
  };

  return ItemView;

})(JLView);

TextItemView = (function(_super) {

  __extends(TextItemView, _super);

  function TextItemView() {
    this._convertToImage = __bind(this._convertToImage, this);

    this._convertToEmbed = __bind(this._convertToEmbed, this);

    this._checkForEmbedURL = __bind(this._checkForEmbedURL, this);

    this._checkForImageURL = __bind(this._checkForImageURL, this);

    this._hideImageBtn = __bind(this._hideImageBtn, this);

    this._showImageBtn = __bind(this._showImageBtn, this);

    this._positionImageBtn = __bind(this._positionImageBtn, this);

    this._addPopup = __bind(this._addPopup, this);

    this._addButton = __bind(this._addButton, this);

    this._maybeImageBtn = __bind(this._maybeImageBtn, this);

    this.paste = __bind(this.paste, this);

    this.keydown = __bind(this.keydown, this);

    this._publishContent = __bind(this._publishContent, this);

    this._setViewContent = __bind(this._setViewContent, this);

    this._getViewContent = __bind(this._getViewContent, this);

    this._postModify = __bind(this._postModify, this);

    this._preModify = __bind(this._preModify, this);

    this.getFontFace = __bind(this.getFontFace, this);

    this.getFontSize = __bind(this.getFontSize, this);

    this.getBGColor = __bind(this.getBGColor, this);

    this.getColor = __bind(this.getColor, this);

    this.getStyleValue = __bind(this.getStyleValue, this);

    this.useAdminStyle = __bind(this.useAdminStyle, this);

    this._getTransitionHandlers = __bind(this._getTransitionHandlers, this);

    this._getFeatureMap = __bind(this._getFeatureMap, this);

    this._featureSwitch = __bind(this._featureSwitch, this);

    this._finalize = __bind(this._finalize, this);

    this.render = __bind(this.render, this);

    this.unbind = __bind(this.unbind, this);

    this.updateView = __bind(this.updateView, this);

    this.isNew = __bind(this.isNew, this);
    return TextItemView.__super__.constructor.apply(this, arguments);
  }

  TextItemView.prototype.className = "item textitem";

  TextItemView.prototype.events = {
    'click .delete-btn': 'delete',
    'resizestop': 'onresizestop',
    'dragstop': 'ondragstop',
    'keydown': 'keydown',
    'keyup': '_postModify',
    'paste': 'paste'
  };

  TextItemView.prototype.isNew = function() {
    var m;
    m = this.model;
    return m.isNew() && !$.trim(m.get('content')) && !m._saving && this.$content.text() === '';
  };

  TextItemView.prototype.updateView = function() {
    this._setViewContent(this.model.get('content'));
    return TextItemView.__super__.updateView.apply(this, arguments);
  };

  TextItemView.prototype.unbind = function() {
    var _ref;
    return (_ref = this.rview) != null ? _ref.unbind() : void 0;
  };

  TextItemView.prototype.render = function() {
    var contentDiv, page;
    TextItemView.__super__.render.apply(this, arguments);
    contentDiv = this.$content = ich.tpl_text_item().empty();
    this.$el.empty().append(contentDiv);
    this._processSize();
    assert(this.$el.text() === '');
    this._setViewContent(this.model.get('content'));
    page = this.model.page;
    this.rview = rivets.bind(this.$el, {
      page: page,
      item: this.model,
      view: this
    });
    this.listenTo(this.model, 'change:link_to_url', this._processLinkToURL);
    this._processLinkToURL();
    this.bindStateChangeHandlers();
    setTimeout(this._maybeImageBtn, 0);
    this.trigger('setstate', this.state);
    return this;
  };

  TextItemView.prototype._finalize = function() {
    log('finalize called', this);
    if (this.isNew() || !this._getViewContent()) {
      return this["delete"]();
    } else {
      this._publishContent();
      return this._hideImageBtn();
    }
  };

  TextItemView.prototype._featureSwitch = function(featureName, onOrOff) {
    var onOffBool;
    assert(onOrOff === 'on' || onOrOff === 'off');
    onOffBool = onOrOff === 'on';
    switch (featureName) {
      case 'classSelected':
        return this.$el.toggleClass('selected', onOffBool);
      case 'classAdmin':
        return this.$el.toggleClass('adminning', onOffBool);
      case 'draggable':
        if (onOffBool) {
          return this._makeDraggable();
        } else {
          return this._rmDraggable();
        }
        break;
      case 'resizeable':
        if (onOffBool) {
          return this.$el.resizable({
            maxHeight: 1000,
            maxWidth: 1000,
            handles: 'se, e, s'
          });
        } else {
          if (this.$el.data('uiResizable')) {
            return this.$el.resizable("destroy");
          }
        }
        break;
      case 'deletebtn':
        if (onOffBool) {
          return this.addDeleteBtn();
        } else {
          return this.removeDeleteBtn();
        }
        break;
      case 'editing':
        if (onOffBool) {
          if (this._editing) {
            return;
          }
          this._editing = true;
          this.$content.text(this.$content.text());
          this.$content.attr('contenteditable', true);
          return this.$content.focus();
        } else {
          this._editing = false;
          this.$content.attr('contenteditable', false);
          this.$content.text(this.$content.br2nl().text());
          return this.$content.linkify({
            target: '_blank'
          });
        }
        break;
      default:
        throw new Error("Unknown feature " + featureName);
    }
  };

  TextItemView.prototype._getFeatureMap = function() {
    var s;
    s = this.constructor.STATES;
    return {
      classAdmin: [s.ADMIN],
      classSelected: [s.ADMIN, s.EDIT],
      draggable: [s.ADMIN],
      resizeable: [s.ADMIN],
      deletebtn: [s.ADMIN],
      editing: [s.ADMIN, s.EDIT]
    };
  };

  TextItemView.prototype._getTransitionHandlers = function() {
    var s;
    s = this.constructor.STATES;
    return {
      '_finalize': ['any', s.VIEW],
      '_hideEditButton': [s.VIEW, 'any']
    };
  };

  TextItemView.prototype.useAdminStyle = function() {
    var page;
    page = this.model.page;
    if (!page.get('use_custom_admin_style')) {
      return false;
    }
    return this.model.getCreatorAffiliation() === AFFILIATIONS.OWNER;
  };

  TextItemView.prototype.getStyleValue = function(propIfCustomStyle, propIfAdmin, propIfNone, defaultVal) {
    var itemLevelValue, page, pageLevelAttribute;
    if (propIfCustomStyle == null) {
      propIfCustomStyle = '';
    }
    if (defaultVal == null) {
      defaultVal = '';
    }
    page = this.model.page;
    itemLevelValue = propIfCustomStyle ? this.model.get(propIfCustomStyle) : null;
    pageLevelAttribute = this.useAdminStyle() ? propIfAdmin : propIfNone;
    return itemLevelValue || page.get(pageLevelAttribute) || defaultVal;
  };

  TextItemView.prototype.getColor = function() {
    return this.getStyleValue('color', 'admin_textitem_color', 'default_textitem_color', 'rgb(0,0,0)');
  };

  TextItemView.prototype.getBGColor = function() {
    return this.getStyleValue('bg_color', 'admin_textitem_bg_color', 'default_textitem_bg_color');
  };

  TextItemView.prototype.getFontSize = function() {
    return this.getStyleValue('font_size', 'admin_textitem_font_size', 'default_textitem_font_size');
  };

  TextItemView.prototype.getFontFace = function() {
    return this.getStyleValue('font', 'default_textitem_font', 'default_textitem_font', 'inherit');
  };

  TextItemView.prototype._preModify = function() {
    if (this.isNew()) {
      return this._setViewContent('');
    }
  };

  TextItemView.prototype._postModify = function() {
    this._publishContent();
    this._checkForImageURL();
    this._checkForEmbedURL();
    return this._maybeImageBtn();
  };

  TextItemView.prototype._getViewContent = function() {
    if (this.isNew()) {
      return '';
    } else {
      return this.$content.text();
    }
  };

  TextItemView.prototype._setViewContent = function(s) {
    return this.$content.empty().text(s);
  };

  TextItemView.prototype._publishContent = function() {
    var content;
    content = this._getViewContent();
    if (this.model.id || content) {
      return this.model.edit('content', content);
    }
  };

  TextItemView.prototype.keydown = function(e) {
    var _ref;
    this._preModify();
    if (e.which === $.ui.keyCode.ENTER && e.shiftKey) {

    } else if ((_ref = e.which) === $.ui.keyCode.ENTER || _ref === $.ui.keyCode.ESCAPE) {
      this.setStateView();
      e.preventDefault();
      this.$content.blur();
      this.pageView.unselectItem();
      e.preventDefault();
      return e.stopPropagation();
    }
  };

  TextItemView.prototype.paste = function(e) {
    var _this = this;
    this.pageView.surface._pasteHappened = true;
    this._preModify();
    return setTimeout((function() {
      var content;
      if (_this.$content.html() !== _this.$content.text()) {
        _this.$content.find(':header').prepend('<div>\n</div>');
        content = $.trim(_this.$content.text());
        content = $.trim(content);
        _this._setViewContent(content);
      }
      _this._postModify();
      return setTimeout(function() {
        return _this.pageView.surface._pasteHappened = false;
      }, 50);
    }), 0);
  };

  TextItemView.prototype._maybeImageBtn = function() {
    var page;
    page = this.model.page;
    if (this.isNew() && Permissions.currentUserCanInsertImageItem(page)) {
      return this._showImageBtn();
    } else {
      return this._hideImageBtn();
    }
  };

  TextItemView.prototype._addButton = function(el) {
    var c, v;
    c = this.$('.content');
    v = c.parent();
    el.css({
      position: 'absolute',
      lineHeight: c.css('lineHeight'),
      top: v.position().top + parseInt(v.css('borderTopWidth')),
      left: v.position().left + v.outerWidth() + 2,
      margin: c.css('margin'),
      padding: c.css('padding'),
      backgroundColor: 'rgba(255, 255, 255, .8)',
      color: 'black',
      zIndex: 1000,
      whiteSpace: 'nowrap'
    });
    el.addClass('item-ctrl');
    return el.appendTo(v.parent());
  };

  TextItemView.prototype._addPopup = function(el) {
    var c, v;
    c = this.$('.content');
    v = c.parent();
    el.css({
      marginTop: v.outerHeight()
    });
    el.addClass('item-ctrl');
    this.pageView.getLuminance(function(l) {
      if (l < .4) {
        return el.addClass('lightness-10');
      }
    });
    el.appendTo(v);
    return el.css({
      marginLeft: -el.outerWidth() / 2
    });
  };

  TextItemView.prototype._positionImageBtn = function() {
    var c, css, v;
    c = this.$('.content');
    v = c.parent();
    css = {
      top: v.position().top + parseInt(v.css('borderTopWidth')),
      left: v.position().left + v.outerWidth() + 2
    };
    this._imageBtn.css(css);
    return this._imageBtn.height(c.outerHeight());
  };

  TextItemView.prototype._showImageBtn = function() {
    var b, border, c, padding, v,
      _this = this;
    this._hideImageBtn();
    b = this._imageBtn = ich.tpl_insert_img_btn(this.commonContext());
    c = this.$content;
    v = this.$el;
    padding = parseInt(c.css('paddingTop'));
    border = parseInt(this.$el.css('borderTopWidth'));
    b.height(v.outerHeight() - 2 * border - 2);
    b.attr('title', 'Insert image');
    b.css({
      top: this.$el.position().top + border + 1,
      left: v.position().left + v.outerWidth() + 2
    });
    b.appendTo(v.parent());
    b.click(function() {
      var imgDfd;
      imgDfd = fpPickImage();
      imgDfd.done(function(fpfile) {
        var x, y, _ref;
        b.remove();
        _ref = _this.model.getN('x', 'y'), x = _ref[0], y = _ref[1];
        return _this.pageView.createImageFromFPFile(fpfile, x, y);
      });
      return imgDfd.fail(function(fperr) {
        return _this.$content.focus();
      });
    });
    this.listenTo(this.model, 'destroy', function() {
      return b.remove();
    });
    return this.listenTo(this.model, 'change:height change:width change:font_size change:content', this._positionImageBtn);
  };

  TextItemView.prototype._hideImageBtn = function() {
    var _ref;
    this.model.off('change:height change:width change:font_size change:content', this._positionImageBtn);
    return (_ref = this._imageBtn) != null ? _ref.remove() : void 0;
  };

  TextItemView.prototype._checkForImageURL = function() {
    var c, confirm, content, dfd, page, v, _ref,
      _this = this;
    page = this.model.page;
    if (!Permissions.currentUserCanInsertImageItem(page)) {
      return;
    }
    content = this._getViewContent();
    if (!content.match(/^https?:\/\/.*\.(jpe?g|gif|png|)$/i)) {
      return;
    }
    log("Confirming conversion");
    if ((_ref = this._pendingConfirm) != null) {
      _ref.reject();
    }
    c = this.$('.content');
    v = c.parent();
    confirm = ich.tpl_confirm_text_to_image({
      itemType: 'image'
    });
    this._addPopup(confirm);
    dfd = $.Deferred();
    dfd.done(this._convertToImage);
    dfd.always(function() {
      return confirm.remove();
    });
    confirm.find('.yes').click(function() {
      return dfd.resolve();
    });
    confirm.find('.no').click(function() {
      return dfd.reject();
    });
    this.model.once('change:content', function() {
      return dfd.reject();
    });
    return this._pendingConfirm = dfd;
  };

  TextItemView.prototype._checkForEmbedURL = function() {
    var c, confirm, content, dfd, embedUrl, page, v, _ref,
      _this = this;
    page = this.model.page;
    if (!Permissions.currentUserCanInsertImageItem(page)) {
      return;
    }
    content = this._getViewContent();
    embedUrl = /((https?:\/\/(.*youtube\.com\/watch.*|.*\.youtube\.com\/v\/.*|youtu\.be\/.*|.*\.youtube\.com\/user\/.*|.*\.youtube\.com\/.*#.*\/.*|m\.youtube\.com\/watch.*|m\.youtube\.com\/index.*|.*\.youtube\.com\/profile.*|.*\.youtube\.com\/view_play_list.*|.*\.youtube\.com\/playlist.*|www\.vimeo\.com\/groups\/.*\/videos\/.*|www\.vimeo\.com\/.*|vimeo\.com\/groups\/.*\/videos\/.*|vimeo\.com\/.*|vimeo\.com\/m\/#\/.*|player\.vimeo\.com\/.*|soundcloud\.com\/.*|soundcloud\.com\/.*\/.*|soundcloud\.com\/.*\/sets\/.*|soundcloud\.com\/groups\/.*|snd\.sc\/.*|.*\.bandcamp\.com\/|.*\.bandcamp\.com\/track\/.*|.*\.bandcamp\.com\/album\/.*))|(https:\/\/(.*youtube\.com\/watch.*|.*\.youtube\.com\/v\/.*|www\.vimeo\.com\/.*|vimeo\.com\/.*|player\.vimeo\.com\/.*)))/i;
    if (!content.match(embedUrl)) {
      return;
    }
    if ((_ref = this._pendingConfirm) != null) {
      _ref.reject();
    }
    c = this.$('.content');
    v = c.parent();
    confirm = ich.tpl_confirm_text_to_image({
      itemType: 'embed'
    });
    this._addPopup(confirm);
    dfd = $.Deferred();
    dfd.done(this._convertToEmbed);
    dfd.always(function() {
      return confirm.remove();
    });
    confirm.find('.yes').click(function() {
      return dfd.resolve();
    });
    confirm.find('.no').click(function() {
      return dfd.reject();
    });
    this.model.once('change:content', function() {
      return dfd.reject();
    });
    return this._pendingConfirm = dfd;
  };

  TextItemView.prototype._convertToEmbed = function() {
    var url, x, y, _ref;
    _ref = this.model.getN('x', 'y'), x = _ref[0], y = _ref[1];
    this["delete"]();
    url = this._getViewContent();
    log("converting to embed with url " + url);
    return this.pageView.createEmbed(x, y, url);
  };

  TextItemView.prototype._convertToImage = function() {
    var dfd, loadingDfd, url, x, y, _ref,
      _this = this;
    _ref = this.model.getN('x', 'y'), x = _ref[0], y = _ref[1];
    loadingDfd = this.pageView._displayLoadingIndicator(x, y);
    this["delete"]();
    url = this._getViewContent();
    dfd = fpStoreUrl(url);
    return dfd.done(function(fpfile) {
      return _this.pageView.createImageFromFPFile(fpfile, x, y);
    }).always(loadingDfd.resolve());
  };

  return TextItemView;

})(ItemView);

ImageItemView = (function(_super) {
  var _this = this;

  __extends(ImageItemView, _super);

  function ImageItemView() {
    this._featureSwitch = __bind(this._featureSwitch, this);

    this._getFeatureMap = __bind(this._getFeatureMap, this);

    this._processBorder = __bind(this._processBorder, this);

    this.doneLoading = __bind(this.doneLoading, this);

    this.render = __bind(this.render, this);
    return ImageItemView.__super__.constructor.apply(this, arguments);
  }

  ImageItemView.prototype.className = "item imageitem";

  ImageItemView.prototype.events = {
    'dragstart .content': function(e) {
      return e.preventDefault();
    },
    'click .delete-btn': 'delete',
    'resizestop': 'onresizestop',
    'resizestart': 'onresizestop',
    'dragstop': 'ondragstop'
  };

  ImageItemView.prototype.render = function() {
    ImageItemView.__super__.render.apply(this, arguments);
    this.content = ich.tpl_imageitem_content({
      src: this.model.get('src')
    });
    this.$el.empty().append(this.content);
    this._processSize();
    this.bindStateChangeHandlers();
    this.trigger('setstate', this.state);
    this.listenTo(this.model, 'change:link_to_url', this._processLinkToURL);
    this._processLinkToURL();
    this.listenTo(this.model, 'change:border_color change:border_width change:border_radius', this._processBorder);
    this._processBorder();
    this.$el.addClass('loading');
    this.$findOne('img').load(this.doneLoading);
    return this;
  };

  ImageItemView.prototype.doneLoading = function() {
    return this.$el.removeClass('loading');
  };

  ImageItemView.prototype._processBorder = function() {
    return this.content.css({
      'border-color': this.model.get('border_color'),
      'border-width': this.model.get('border_width') || 0,
      'border-radius': this.model.get('border_radius')
    });
  };

  ImageItemView.prototype._getFeatureMap = function() {
    var s;
    s = this.constructor.STATES;
    return {
      'classSelected': [s.ADMIN, s.EDIT],
      'draggable': [s.ADMIN, s.EDIT],
      'resizeable': [s.ADMIN, s.EDIT],
      'deletebtn': [s.ADMIN, s.EDIT]
    };
  };

  ImageItemView.prototype._featureSwitch = function(featureName, onOrOff) {
    var onOffBool;
    assert(onOrOff === 'on' || onOrOff === 'off');
    onOffBool = onOrOff === 'on';
    switch (featureName) {
      case 'classSelected':
        return this.$el.toggleClass('selected', onOffBool);
      case 'draggable':
        if (onOffBool) {
          return this._makeDraggable();
        } else {
          return this._rmDraggable();
        }
        break;
      case 'resizeable':
        if (onOffBool) {
          return this.$el.resizable({
            maxHeight: 1000,
            maxWidth: 1000,
            handles: 'se, e, s'
          });
        } else {
          if (this.$el.data('uiResizable')) {
            return this.$el.resizable("destroy");
          }
        }
        break;
      case 'deletebtn':
        if (onOffBool) {
          return this.addDeleteBtn();
        } else {
          return this.removeDeleteBtn();
        }
        break;
      default:
        throw new Error("Unknown feature " + featureName);
    }
  };

  return ImageItemView;

}).call(this, ItemView);

EmbedItemView = (function(_super) {
  var _this = this;

  __extends(EmbedItemView, _super);

  function EmbedItemView() {
    this._featureSwitch = __bind(this._featureSwitch, this);

    this._getFeatureMap = __bind(this._getFeatureMap, this);

    this.render = __bind(this.render, this);
    return EmbedItemView.__super__.constructor.apply(this, arguments);
  }

  EmbedItemView.prototype.className = "item embeditem";

  EmbedItemView.prototype.events = {
    'dragstart .content': function(e) {
      return e.preventDefault();
    },
    'click .delete-btn': 'delete',
    'resizestop': 'onresizestop',
    'resizestart': 'onresizestop',
    'dragstop': 'ondragstop'
  };

  EmbedItemView.prototype.render = function() {
    var embedlyData, providerName,
      _this = this;
    EmbedItemView.__super__.render.apply(this, arguments);
    embedlyData = JSON.parse(this.model.get('embedly_data'));
    providerName = embedlyData.providerName;
    this.content = ich.tpl_embeditem_content();
    this.content.addClass(providerName);
    this.embed = $(embedlyData.html);
    this.invisibleLayer = this.content.findOne('.invisible-layer');
    this.content.append(this.embed);
    this.$el.empty().append(this.content);
    this.$el.addClass('loading');
    this.embed.load(function() {
      return _this.$el.removeClass('loading');
    });
    this._processSize();
    this.bindStateChangeHandlers();
    this.trigger('setstate', this.state);
    this.listenTo(this.$el, 'resizestart dragstart', function() {
      return _this.invisibleLayer.show();
    });
    this.listenTo(this.$el, 'resizestop dragstop', function() {
      return _this.invisibleLayer.hide();
    });
    return this;
  };

  EmbedItemView.prototype._getFeatureMap = function() {
    var s;
    s = this.constructor.STATES;
    return {
      'classSelected': [s.ADMIN, s.EDIT],
      'engaged': [s.ADMIN, s.EDIT, s.ENGAGED],
      'draggable': [s.ADMIN, s.EDIT],
      'resizeable': [s.ADMIN, s.EDIT],
      'deletebtn': [s.ADMIN, s.EDIT]
    };
  };

  EmbedItemView.prototype._featureSwitch = function(featureName, onOrOff) {
    var onOffBool;
    assert(onOrOff === 'on' || onOrOff === 'off');
    onOffBool = onOrOff === 'on';
    switch (featureName) {
      case 'classSelected':
        return this.$el.toggleClass('selected', onOffBool);
      case 'engaged':
        this.$el.toggleClass('engaged', onOffBool);
        return this.invisibleLayer.toggle(!onOffBool);
      case 'draggable':
        if (onOffBool) {
          return this._makeDraggable();
        } else {
          return this._rmDraggable();
        }
        break;
      case 'resizeable':
        if (onOffBool) {
          return this.$el.resizable({
            aspectRatio: true,
            maxHeight: 1000,
            minWidth: 200,
            maxWidth: 1000,
            handles: 'se, e, s'
          });
        } else {
          if (this.$el.data('uiResizable')) {
            return this.$el.resizable("destroy");
          }
        }
        break;
      case 'deletebtn':
        if (onOffBool) {
          return this.addDeleteBtn();
        } else {
          return this.removeDeleteBtn();
        }
        break;
      default:
        throw new Error("Unknown feature " + featureName);
    }
  };

  return EmbedItemView;

}).call(this, ItemView);

ActivityView = (function(_super) {

  __extends(ActivityView, _super);

  function ActivityView() {
    this._destroy = __bind(this._destroy, this);

    this._displayOnEdge = __bind(this._displayOnEdge, this);

    this._goToItem = __bind(this._goToItem, this);

    this._positionActivityArrow = __bind(this._positionActivityArrow, this);

    this.initialize = __bind(this.initialize, this);
    return ActivityView.__super__.constructor.apply(this, arguments);
  }

  ActivityView.prototype.className = 'activity-notification';

  ActivityView.prototype.events = {
    'click': '_goToItem'
  };

  ActivityView.prototype.initialize = function() {
    var activityEl, iv, x, y, _ref;
    this.item = this.options.item;
    this.itemX = this.item.get('x');
    this.itemY = this.item.get('y');
    iv = this.item.view.$el;
    this.itemW = iv.outerWidth();
    this.itemH = iv.outerHeight();
    this.itemCenterY = this.itemY + (this.itemH / 2);
    this.itemCenterX = this.itemX + (this.itemW / 2);
    this.listenTo(this.options.surface, 'set-center', this._positionActivityArrow);
    activityEl = ich.tpl_activity_notification({
      username: this.options.username || "Someone"
    });
    this.options.pageView.getLuminance(function(l) {
      if (l < .4) {
        return activityEl.addClass('lightness-10');
      }
    });
    activityEl.hide();
    this.setElement(activityEl);
    activityEl.appendTo(this.options.parent);
    this.$el.fadeIn();
    _ref = this.options.surface.getCenter(), x = _ref[0], y = _ref[1];
    this._positionActivityArrow(x, y, 0);
    return setTimeout(this._destroy, 5000);
  };

  ActivityView.prototype._positionActivityArrow = function(centerX, centerY) {
    var absX, absY, cornerRatio, edge, h, isInside, isVerticalEdge, ratio, w, x, y;
    y = this.itemCenterY - centerY;
    x = this.itemCenterX - centerX;
    absY = Math.abs(y);
    absX = Math.abs(x);
    h = this.options.parent.height();
    w = this.options.parent.width();
    ratio = absX ? absY / absX : absY;
    cornerRatio = w ? h / w : h;
    isVerticalEdge = ratio > cornerRatio;
    isInside = this.options.surface.isBoxInView(this.itemX, this.itemY, this.itemW, this.itemH);
    if (isVerticalEdge) {
      if (y > 0) {
        edge = 'bottom';
      } else {
        edge = 'top';
      }
    } else {
      if (x > 0) {
        edge = 'right';
      } else {
        edge = 'left';
      }
    }
    return this._displayOnEdge(edge, x, y, h, w, isInside);
  };

  ActivityView.prototype._goToItem = function() {
    var x, y, _ref;
    if (this.options.item) {
      _ref = this.options.pageView.mapElementToCoordinates(this.options.item), x = _ref[0], y = _ref[1];
      return this.options.surface.initScrollToCoords(x, y);
    }
  };

  ActivityView.prototype._displayOnEdge = function(position, x, y, h, w, isInside) {
    var css;
    if (this._previousClass !== position || this._wasInside !== isInside) {
      if (this._previousClass) {
        this.$el.removeClass(this._previousClass);
      }
      this.$el.toggleClass('inside', isInside);
      this._previousClass = position;
      this._wasInside = isInside;
      this.$el.addClass(position);
    }
    this.w = this.$el.outerWidth();
    this.h = this.$el.outerHeight();
    css = {
      left: '',
      right: '',
      bottom: '',
      top: '',
      marginLeft: '',
      marginTop: ''
    };
    if (!isInside) {
      if (position === 'top') {
        css.left = (-h * x) / (2 * y) + (w / 2);
        css.top = 40;
        css.marginLeft = -this.w / 2;
      } else if (position === 'bottom') {
        css.left = (h * x) / (2 * y) + (w / 2);
        css.bottom = 0;
        css.marginLeft = -this.w / 2;
      } else if (position === 'right') {
        css.top = (w * y) / (2 * x) + (h / 2);
        css.right = 0;
        css.marginTop = -this.h / 2;
      } else if (position === 'left') {
        css.top = (-w * y) / (2 * x) + (h / 2);
        css.marginTop = -this.h / 2;
      }
    } else {
      css.top = h / 2 + y;
      css.left = w / 2 + x;
      if (position === 'top') {
        css.marginTop = 12 + this.itemH / 2;
        css.marginLeft = -this.w / 2;
      } else if (position === 'bottom') {
        css.marginTop = -(this.h + 12 + this.itemH / 2 + 2);
        css.marginLeft = -this.w / 2;
      } else if (position === 'right') {
        css.marginTop = -this.h / 2;
        css.marginLeft = -(this.w + 12 + this.itemW / 2 + 2);
      } else if (position === 'left') {
        css.marginTop = -this.h / 2;
        css.marginLeft = this.itemW;
      }
    }
    return this.$el.css(css);
  };

  ActivityView.prototype._destroy = function() {
    var _this = this;
    if (this._destroying) {
      return;
    }
    this._destroying = true;
    return this.$el.fadeOut(500, function() {
      _this.stopListening(_this.options.surface, 'set-center');
      _this.remove();
      return _this.trigger('destroyed');
    });
  };

  return ActivityView;

})(JLView);

PageView = (function(_super) {

  __extends(PageView, _super);

  function PageView() {
    this.getLuminance = __bind(this.getLuminance, this);

    this.ondrop = __bind(this.ondrop, this);

    this.onkeydown = __bind(this.onkeydown, this);

    this.insertPendingNewline = __bind(this.insertPendingNewline, this);

    this.insertPending = __bind(this.insertPending, this);

    this._insertNewText = __bind(this._insertNewText, this);

    this.createEmbed = __bind(this.createEmbed, this);

    this.createImageFromFPFile = __bind(this.createImageFromFPFile, this);

    this._createItem = __bind(this._createItem, this);

    this.onmouseup = __bind(this.onmouseup, this);

    this.onmousemove = __bind(this.onmousemove, this);

    this.onmousedown = __bind(this.onmousedown, this);

    this.unselectItem = __bind(this.unselectItem, this);

    this.setSelectedIV = __bind(this.setSelectedIV, this);

    this.updateBackground = __bind(this.updateBackground, this);

    this.resize = __bind(this.resize, this);

    this._setParentSize = __bind(this._setParentSize, this);

    this.mapElementToCoordinates = __bind(this.mapElementToCoordinates, this);

    this.render = __bind(this.render, this);

    this.insertOneItem = __bind(this.insertOneItem, this);

    this._insertItem = __bind(this._insertItem, this);

    this._displayPageDeleted = __bind(this._displayPageDeleted, this);

    this.handleNewLocation = __bind(this.handleNewLocation, this);

    this._extractOptionsPosition = __bind(this._extractOptionsPosition, this);

    this._externalItemAdded = __bind(this._externalItemAdded, this);

    this._displayErrorMessage = __bind(this._displayErrorMessage, this);

    this._displayLoadingIndicator = __bind(this._displayLoadingIndicator, this);

    this.unbind = __bind(this.unbind, this);

    this.remove = __bind(this.remove, this);
    return PageView.__super__.constructor.apply(this, arguments);
  }

  PageView.prototype.className = 'page-view';

  PageView.prototype.initialize = function() {
    var _this = this;
    log("pageview initialize on", this, arguments);
    this.surface = new TilingCanvas(this.$el);
    this.listenTo(this.model.items, 'add', this.insertOneItem);
    this.listenTo(this.model.items, 'destroy', function(model) {
      var _ref;
      if (model === ((_ref = _this.selectedIV) != null ? _ref.model : void 0)) {
        return _this.unselectItem();
      }
    });
    this.listenTo(this.model, 'change:bg_color change:bg_texture change:bg_fn', this.updateBackground);
    this.listenTo(this.model, 'page-deleted', this._displayPageDeleted);
    this.updateBackground();
    this.selectedIV = null;
    this.listenTo(this.model, 'external-item-added external-item-updated', this._externalItemAdded);
    this._activityNotifications = {};
    filepicker.setKey(JL_CONFIG.FILEPICKER_KEY);
    $.embedly.defaults.key = JL_CONFIG.EMBEDLY_KEY;
    this.listenTo($(window), 'keydown', this.onkeydown);
    return this.listenTo(this.model, 'change:bg_color change:bg_texture', function() {
      return _this.getLuminance(function(l) {
        var lumThreshold;
        lumThreshold = .45;
        return $('.arrow-box').toggleClass('lightness-10', l < lumThreshold);
      });
    });
  };

  PageView.prototype.remove = function() {
    log("in pageview remove", this);
    this.surface.remove();
    return PageView.__super__.remove.apply(this, arguments);
  };

  PageView.prototype.unbind = function() {
    var _ref;
    if ((_ref = this.dragToScroll) != null) {
      _ref.destroy();
    }
    return this.$el.unmousewheel();
  };

  PageView.prototype._displayLoadingIndicator = function(x, y, message) {
    var dfd, loading, opts, spinner,
      _this = this;
    loading = ich.tpl_loading_indicator();
    loading.hide();
    this.surface.addItem(x, y, loading);
    this.getLuminance(function(l) {
      if (l < .4) {
        return loading.addClass('lighter-bg');
      }
    });
    opts = {
      lines: 13,
      length: 10,
      width: 4,
      radius: 12,
      corners: 1,
      rotate: 0,
      color: '#fff',
      speed: 1,
      shadow: false,
      trail: 60,
      className: 'spinner',
      zIndex: 2e9
    };
    spinner = new Spinner(opts).spin();
    loading.fadeIn();
    loading.append(spinner.el);
    dfd = $.Deferred();
    dfd.always(function() {
      return loading.fadeOut(500, function() {
        spinner.stop();
        return loading.remove();
      });
    });
    return dfd;
  };

  PageView.prototype._displayErrorMessage = function(x, y, message) {
    var error;
    error = ich.tpl_leaf_error_message({
      message: message
    });
    error.hide();
    this.surface.addItem(x, y, error);
    this.getLuminance(function(l) {
      if (l < .4) {
        return error.addClass('lightness-10');
      }
    });
    error.css({
      marginTop: -error.outerHeight() / 2
    });
    error.fadeIn();
    return setTimeout(function() {
      var _this = this;
      return error.fadeOut(500, function() {
        return error.remove();
      });
    }, 2500);
  };

  PageView.prototype._externalItemAdded = function(item, username, user_identifier) {
    var h, itemId, iv, newNotification, notification, notifications, w, x, y, _base, _i, _j, _len, _len1,
      _this = this;
    x = item.get('x');
    y = item.get('y');
    iv = item.view.$el;
    w = iv.width();
    h = iv.height();
    if (!this.surface.isBoxInView(x, y, w, h)) {
      itemId = item.id;
      (_base = this._activityNotifications)[user_identifier] || (_base[user_identifier] = []);
      notifications = this._activityNotifications[user_identifier];
      for (_i = 0, _len = notifications.length; _i < _len; _i++) {
        notification = notifications[_i];
        if (notification.item.id === itemId) {
          return;
        }
      }
      for (_j = 0, _len1 = notifications.length; _j < _len1; _j++) {
        notification = notifications[_j];
        notification._destroy();
      }
      newNotification = new ActivityView({
        surface: this.surface,
        pageView: this,
        item: item,
        parent: this.options.parent,
        username: username,
        user_id: user_identifier
      });
      this.listenTo(newNotification, 'destroyed', function() {
        var idx;
        idx = notifications.indexOf(newNotification);
        if (idx > -1) {
          return notifications.splice(idx, 1);
        }
      });
      return notifications.push(newNotification);
    }
  };

  PageView.prototype._extractOptionsPosition = function(options) {
    var initX, initY, item, _ref;
    initX = options.initX || 0;
    initY = options.initY || 0;
    if (options.initId) {
      item = this.model.items.get(options.initId);
      if (!item) {
        return false;
      }
      _ref = this.mapElementToCoordinates(item), initX = _ref[0], initY = _ref[1];
    }
    return [initX, initY];
  };

  PageView.prototype.handleNewLocation = function(options) {
    var coords, x, y;
    coords = this._extractOptionsPosition(options);
    if (coords) {
      x = coords[0], y = coords[1];
      return this.surface.initScrollToCoords(x, y);
    }
  };

  PageView.prototype._displayPageDeleted = function() {
    var overlay,
      _this = this;
    this.model.items.each(function(item) {
      return item.view.remove();
    });
    overlay = ich.tpl_page_deleted();
    overlay.hide();
    this.options.parent.append(overlay);
    overlay.fadeIn();
    return $(window).off('keydown');
  };

  PageView.prototype._insertItem = function(item) {
    var View, baseZ, view;
    if (item instanceof TextItem) {
      View = TextItemView;
    } else if (item instanceof ImageItem) {
      View = ImageItemView;
    } else if (item instanceof EmbedItem) {
      View = EmbedItemView;
    }
    assert(View, "Unknown view class for item" + item);
    view = item.view = new View({
      model: item
    }).render();
    baseZ = 2;
    if (item.getCreatorAffiliation() === AFFILIATIONS.OWNER) {
      baseZ += 4;
    }
    if (item instanceof EmbedItem) {
      baseZ += 2;
    } else if (item instanceof TextItem) {
      baseZ += 1;
    }
    view.$el.css('zIndex', baseZ);
    this.surface.addItem(item.get('x'), item.get('y'), view.$el);
    view.pageView = this;
    return view;
  };

  PageView.prototype.insertOneItem = function(item) {
    var view;
    assert(item instanceof Item);
    return view = this._insertItem(item);
  };

  PageView.prototype.render = function() {
    var i,
      _this = this;
    log("rendering pageview", this.model, this.el);
    this.options.parent.append(this.$el);
    if (this.options.fullscreen) {
      this._setParentSize();
    }
    this.surface.render();
    this.listenTo($(window), 'resize', this.resize);
    this.dragToScroll = new DraggableSurface(this.$el, function(dX, dY) {
      return _this.surface.moveContentBy(-dX, -dY);
    });
    this.$el.mousewheel(function(e, d, dX, dY) {
      dX = -Math.ceil(dX * 20);
      dY = Math.ceil(dY * 20);
      _this.surface.moveContentBy(dX, dY);
      return e.preventDefault();
    });
    this.dragToScroll.enable();
    log("ADDING HOME BUTTON");
    i = $('<img class="home-button">');
    i.attr('src', "" + JL_CONFIG.STATIC_URL + "images/home-icon-bw.png");
    i.hide();
    this.options.parent.append(i);
    this.listenTo(i, 'click', function() {
      return _this.surface.initScrollToCoords(0, 0);
    });
    this.listenTo(this.surface, 'set-center', function(xPosition, yPosition) {
      var distanceToCenter;
      distanceToCenter = vectorLen(xPosition, yPosition);
      if (distanceToCenter > 1000) {
        return i.fadeIn();
      } else {
        return i.fadeOut();
      }
    });
    return setTimeout(function() {
      var coords, initX, initY;
      _this.model.items.each(_this._insertItem);
      coords = _this._extractOptionsPosition(_this.options);
      if (coords) {
        initX = coords[0], initY = coords[1];
        return _this.surface.moveContentBy(-initX, -initY);
      }
    }, 0);
  };

  PageView.prototype.mapElementToCoordinates = function(element) {
    var h, initX, initY, view, w, x, y;
    assert(element);
    x = element.get('x');
    y = element.get('y');
    view = element.view.$el;
    h = view.height();
    w = view.width();
    h += h % 2;
    w += w % 2;
    initX = x + (w / 2);
    initY = y + (h / 2);
    return [initX, initY];
  };

  PageView.prototype._setParentSize = function() {
    var height, width;
    height = $(window).height();
    width = $(window).width();
    this.options.parent.height(height);
    return this.options.parent.width(width);
  };

  PageView.prototype.resize = function(e) {
    if (e == null) {
      e = false;
    }
    if ((e != null ? e.target : void 0) === window || e === false) {
      if (this.options.fullscreen) {
        log('pageview resizing');
        this._setParentSize();
        return this.surface.resize();
      }
    }
  };

  PageView.prototype.updateBackground = function() {
    var color, i, texture, textureName,
      _this = this;
    log("updateBackground");
    textureName = this.model.get('bg_texture');
    color = this.model.get('bg_color');
    this.$el.css('background-color', color || 'white');
    if (textureName) {
      if (Assets.BGPatterns.hasKey(textureName)) {
        texture = Assets.BGPatterns.get(textureName);
        return this.surface.setBackground(texture.url, texture.size);
      } else {
        i = new ImageAtURL(textureName);
        return i.ensureSize(function() {
          Assets.BGPatterns.add(i);
          return _this.surface.setBackground(i.url, i.size);
        });
      }
    } else {
      return this.surface.clearBackground();
    }
  };

  PageView.prototype.setSelectedIV = function(itemView) {
    var _ref;
    log('selecting', itemView);
    this._prevSelected = this.selectedIV;
    if (itemView === this.selectedIV) {
      return;
    }
    if ((_ref = this.selectedIV) != null) {
      _ref.setStateView();
    }
    this.selectedIV = itemView;
    if (itemView) {
      this.dragToScroll.disable();
    } else {
      this.dragToScroll.enable();
      if (document.activeElement.tagName !== 'BODY') {
        $(document.activeElement).blur();
      }
    }
    return this.trigger('set-selected-itemview', this.selectedIV);
  };

  PageView.prototype.unselectItem = function() {
    log('unselecting', this.selectedIV);
    return this.setSelectedIV(null);
  };

  PageView.prototype.onmousedown = function(event) {
    var canEditItem, canInsert, isAdmin, isSelectedItem, item, itemView, page, target, user;
    log('mousedown', event);
    this.surface.cancelScrolling();
    target = $(event.target);
    if (target.hasClass('item-ctrl') || target.parents('.item-ctrl').length) {
      log("Page letting item handle item-ctrl mouse event");
      return true;
    }
    if ((target.prop('tagName') === 'A') || target.parents('a').length) {
      return true;
    }
    if (this.selectedIV && (this.selectedIV.getState() === TextItemView.STATES.VIEW)) {
      this.unselectItem();
    }
    user = JL.AuthState.getUser();
    page = this.model;
    itemView = $(event.target).parents('.item').andSelf().data('view');
    item = itemView != null ? itemView.model : void 0;
    isAdmin = Permissions.currentUserCanEditPage(page);
    canEditItem = isSelectedItem = false;
    if (itemView) {
      canEditItem = Permissions.canEditItem(item);
      isSelectedItem = itemView === this.selectedIV;
    }
    log("Processing mousedown with state:", user, page, itemView, item, isAdmin, canEditItem, isSelectedItem, this.selectedIV);
    if (item) {
      if (this.selectedIV) {
        if (isSelectedItem) {
          true;
        } else {
          this.unselectItem();
          if ($(event.target).hasClass('edit-btn')) {
            this._pendingSelection = {
              itemView: itemView,
              type: 'admin'
            };
          }
        }
      } else {
        if (isAdmin || canEditItem) {
          this._pendingSelection = {
            itemView: itemView,
            type: 'admin'
          };
        } else {
          this._pendingSelection = {
            itemView: itemView,
            type: 'engaged'
          };
        }
      }
      return;
    }
    assert(!item);
    this._pendingSelection = null;
    if (this.selectedIV) {
      this.unselectItem();
      return;
    }
    canInsert = Permissions.currentUserCanInsertTextItem(page);
    if (canInsert) {
      assert(!this._pendingSelection);
      return this._pendingInsert = {
        time: new Date().getTime(),
        x: event.screenX,
        y: event.screenY
      };
    }
  };

  PageView.prototype.onmousemove = function(event) {
    this._pendingSelection = null;
    return this._pendingInsert = null;
  };

  PageView.prototype.onmouseup = function(event) {
    var itemView, type;
    if (this._pendingSelection) {
      itemView = this._pendingSelection.itemView;
      type = this._pendingSelection.type;
      log('selecting', itemView, 'with mode', type);
      this._pendingSelection = null;
      this.setSelectedIV(itemView);
      switch (type) {
        case 'admin':
          itemView.setStateAdmin();
          if ($(event.target).hasClass('edit-btn')) {
            this.options.parentView.pageOptionsView.hide();
            this.options.parentView.itemEditor.show();
            return itemView._hideEditButton();
          }
          break;
        case 'edit':
          return itemView.setStateEdit();
        case 'engaged':
          return itemView.setStateEngaged();
        default:
          throw new Error("Unknown selection type", type);
      }
    } else if (this._pendingInsert) {
      log('insert at ', this._pendingInsert);
      return this.insertPending(event);
    }
  };

  PageView.prototype._createItem = function(itemClass, attrs) {
    var item, view,
      _this = this;
    $.extend(attrs, {
      creator_id: JL.AuthState.getUserId()
    });
    item = new itemClass(attrs);
    item.page = this.model;
    this.model.items.add(item);
    assert(item.view);
    view = item.view;
    this.setSelectedIV(view);
    view.setStateEdit();
    item.once('change:id', function() {
      return mixpanel.track("Item created", {
        type: itemClass.shortName
      });
    });
    return item;
  };

  PageView.prototype.createImageFromFPFile = function(fpfile, x, y) {
    var item,
      _this = this;
    item = this._createItem(ImageItem, {
      x: x,
      y: y,
      src: fpfile.url
    });
    return getImageSize(fpfile.url, function(width, height) {
      var _ref;
      _ref = scaleBoxSize(width, height, 1000), width = _ref[0], height = _ref[1];
      item.set('width', width);
      item.set('height', height);
      return item.save();
    });
  };

  PageView.prototype.createEmbed = function(x, y, url) {
    var dfd, item, loadingDfd,
      _this = this;
    loadingDfd = this._displayLoadingIndicator(x, y);
    item = new EmbedItem({
      x: x,
      y: y,
      original_url: url
    });
    item.page = this.model;
    dfd = item.save().always(function() {
      return loadingDfd.resolve();
    }).done(function() {
      var view;
      mixpanel.track("Item created", {
        type: EmbedItem.shortName
      });
      _this.model.items.add(item);
      assert(item.view);
      view = item.view;
      _this.setSelectedIV(view);
      return view.setStateEdit();
    }).fail(function() {
      _this._displayErrorMessage(x, y, "Couldn't convert URL to embed. Check your link and try again.");
      return log("Couldn't convert URL to embed");
    });
    return dfd;
  };

  PageView.prototype._insertNewText = function(x, y, options) {
    var attributes,
      _this = this;
    if (options == null) {
      options = {};
    }
    log("inserting new text item at coordinates", x, y);
    attributes = _.extend({
      x: x,
      y: y
    }, options);
    this._createItem(TextItem, attributes);
    this.$el.css('cursor', 'none');
    return setTimeout(function() {
      return _this.$el.one('mousemove', function(e) {
        return _this.$el.css('cursor', '');
      });
    }, 250);
  };

  PageView.prototype.insertPending = function(e) {
    var itemPadding, lineHeight, screenX, screenY, x, y, _ref;
    if (!this._pendingInsert) {
      return;
    }
    log(e.pageX, '-', this.$el.offset().left);
    screenX = e.pageX - this.$el.offset().left;
    screenY = e.pageY - this.$el.offset().top;
    _ref = this.surface.screenPixelsToCoords(screenX, screenY), x = _ref[0], y = _ref[1];
    itemPadding = 2;
    lineHeight = 13;
    x -= itemPadding;
    y -= itemPadding;
    y -= Math.floor(lineHeight / 2);
    return this._insertNewText(x, y);
  };

  PageView.prototype.insertPendingNewline = function() {
    var x, y;
    if (this.selectedIV || (!(this._prevSelected instanceof TextItemView))) {
      return;
    }
    mixpanel.track("Enter-to-insert");
    x = this._prevSelected.model.get('x');
    y = this._prevSelected.model.get('y') + this._prevSelected.$el.outerHeight() - 2;
    return this._insertNewText(x, y, {
      font_size: this._prevSelected.model.get('font_size')
    });
  };

  PageView.prototype.onkeydown = function(e) {
    var d, item, _ref, _ref1, _ref2;
    log('keydown', e, e.which);
    if (document.activeElement.tagName !== 'BODY') {
      return;
    }
    item = (_ref = this.selectedIV) != null ? _ref.model : void 0;
    d = 42;
    switch (e.which) {
      case $.ui.keyCode.DOWN:
        if (e.altKey || e.shiftKey) {
          return item != null ? item.edit('y', item.get('y') + 1, {
            instant: true
          }) : void 0;
        } else {
          return this.surface.moveContentBy(0, -d);
        }
        break;
      case $.ui.keyCode.UP:
        if (e.altKey || e.shiftKey) {
          return item != null ? item.edit('y', item.get('y') - 1, {
            instant: true
          }) : void 0;
        } else {
          return this.surface.moveContentBy(0, d);
        }
        break;
      case $.ui.keyCode.LEFT:
        if (e.altKey || e.shiftKey) {
          return item != null ? item.edit('x', item.get('x') - 1, {
            instant: true
          }) : void 0;
        } else {
          return this.surface.moveContentBy(d, 0);
        }
        break;
      case $.ui.keyCode.RIGHT:
        if (e.altKey || e.shiftKey) {
          return item != null ? item.edit('x', item.get('x') + 1, {
            instant: true
          }) : void 0;
        } else {
          return this.surface.moveContentBy(-d, 0);
        }
        break;
      case $.ui.keyCode.PAGE_DOWN:
        return this.surface.moveContentBy(0, -d * 5);
      case $.ui.keyCode.PAGE_UP:
        return this.surface.moveContentBy(0, d * 5);
      case $.ui.keyCode.HOME:
        return this.surface.initScrollToCoords(0, 0);
      case $.ui.keyCode.ESCAPE:
        return this.unselectItem();
      case $.ui.keyCode.ENTER:
        e.preventDefault();
        return this.insertPendingNewline();
      case $.ui.keyCode.DELETE:
        return (_ref1 = this.selectedIV) != null ? _ref1["delete"]() : void 0;
      case $.ui.keyCode.BACKSPACE:
        e.preventDefault();
        return (_ref2 = this.selectedIV) != null ? _ref2["delete"]() : void 0;
    }
  };

  PageView.prototype.events = {
    'mousedown .tilingcanvas-canvas': 'onmousedown',
    'mousemove .tilingcanvas-canvas': 'onmousemove',
    'mouseup .tilingcanvas-canvas': 'onmouseup',
    'dragover': function(e) {
      return e.preventDefault();
    },
    'drop': 'ondrop'
  };

  PageView.prototype.ondrop = function(e) {
    var f, loadingDfd, windowX, windowY, x, y, _ref, _ref1,
      _this = this;
    e.preventDefault();
    e = e.originalEvent;
    f = e.dataTransfer.files[0];
    if (f.type.indexOf('image/') !== 0) {
      return;
    }
    _ref = [e.clientX, e.clientY], windowX = _ref[0], windowY = _ref[1];
    _ref1 = this.surface.screenPixelsToCoords(windowX, windowY), x = _ref1[0], y = _ref1[1];
    loadingDfd = this._displayLoadingIndicator(x, y);
    return fpStore(f).done(function(fpfile) {
      loadingDfd.resolve();
      return _this.createImageFromFPFile(fpfile, x, y);
    });
  };

  PageView.prototype.getLuminance = function(callback) {
    var bg_color, texture, textureName, url;
    bg_color = this.model.get('bg_color');
    textureName = this.model.get('bg_texture');
    if (textureName) {
      if (Assets.BGPatterns.hasKey(textureName)) {
        texture = Assets.BGPatterns.get(textureName);
        url = texture.url;
      } else {
        url = textureName;
      }
    }
    return Color.getBGLuminance(bg_color, url, callback);
  };

  return PageView;

})(JLView);

Pane = (function(_super) {

  __extends(Pane, _super);

  function Pane() {
    this.show = __bind(this.show, this);

    this.hide = __bind(this.hide, this);

    this.toggle = __bind(this.toggle, this);
    return Pane.__super__.constructor.apply(this, arguments);
  }

  Pane.prototype.toggle = function() {
    var _this = this;
    this._visible = !this._visible;
    this.$el.css('overflow-y', 'hidden');
    $('.page-options-dropdown').addClass('toggling');
    return this.$el.toggle('slide', {
      direction: "right",
      speed: 'fast'
    }, (function() {
      _this.$el.css('overflow-y', 'auto');
      return $('.page-options-dropdown').removeClass('toggling');
    }));
  };

  Pane.prototype.hide = function() {
    if (this._visible) {
      return this.toggle();
    }
  };

  Pane.prototype.show = function() {
    if (!this._visible) {
      return this.toggle();
    }
  };

  Pane.prototype.events = {
    'click .bootstrap-close': 'toggle'
  };

  return Pane;

})(JLView);

PageOptionsView = (function(_super) {

  __extends(PageOptionsView, _super);

  function PageOptionsView() {
    this.setBGImageFromFilePicker = __bind(this.setBGImageFromFilePicker, this);

    this._errBack = __bind(this._errBack, this);

    this._bindSettingsOptions = __bind(this._bindSettingsOptions, this);

    this.chooseCustomBG = __bind(this.chooseCustomBG, this);

    this._bindStyleOptions = __bind(this._bindStyleOptions, this);

    this.unbind = __bind(this.unbind, this);

    this.initialize = __bind(this.initialize, this);
    return PageOptionsView.__super__.constructor.apply(this, arguments);
  }

  PageOptionsView.prototype.initialize = function() {
    this.$el = ich.tpl_page_viewer_options().appendTo(this.options.parent);
    this._visible = false;
    new TabbedPane(this.$el);
    this._bindStyleOptions();
    return this._bindSettingsOptions();
  };

  PageOptionsView.prototype.unbind = function() {
    var _ref, _ref1, _ref2;
    if ((_ref = this._checkBoxButton) != null) {
      _ref.destroy();
    }
    if ((_ref1 = this.rview) != null) {
      _ref1.unbind();
    }
    return (_ref2 = this._fontSelector) != null ? _ref2.destroy() : void 0;
  };

  PageOptionsView.prototype._bindStyleOptions = function() {
    var font, initialFont, initialFontFamily, model, pageOptionsColorPicker, texture, url,
      _this = this;
    model = this.model;
    this.fontOptions = (function() {
      var _i, _len, _ref, _results;
      _ref = Assets.Fonts.list();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        font = _ref[_i];
        _results.push({
          font: font
        });
      }
      return _results;
    })();
    this.bgTextureOptions = (function() {
      var _i, _len, _ref, _results;
      _ref = Assets.BGPatterns.list();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        texture = _ref[_i];
        _results.push({
          val: texture.name,
          src: texture.url
        });
      }
      return _results;
    })();
    this._customBGLabel = $('.custom-texture-radio').css('background-size', '100%');
    this._customBGInput = $('.custom-texture-radio input');
    this._customBGChange = $('.custom-texture-change');
    this.listenTo(this._customBGLabel, 'click', function() {
      var hasValue;
      hasValue = _this._customBGInput.val() && _this._customBGInput.val() !== 'on';
      if (hasValue) {
        return model.edit('bg_texture', _this._customBGInput.val());
      } else {
        return _this.chooseCustomBG();
      }
    });
    this.listenTo(this._customBGChange, 'click', this.chooseCustomBG);
    url = model.get('bg_texture');
    if (Assets.isCustomPattern(url)) {
      this._customBGInput.attr('checked', 'checked').attr('value', url);
      this._customBGLabel.css('background-image', "url('" + url + "')");
      this._customBGChange.show();
    } else {
      this._customBGChange.hide();
    }
    this.rview = rivets.bind(this.$el, {
      page: model,
      view: this
    });
    pageOptionsColorPicker = $('.pageOptions .colorPickerInput').colorpicker();
    this.listenTo(pageOptionsColorPicker, 'changeColor', function(ev) {
      var colorFormat, colorString, path, rgb;
      colorFormat = $(this).data('color-format');
      if (colorFormat === 'rgba') {
        rgb = ev.color.toRGB();
        colorString = "rgba(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ", " + rgb.a + ")";
      } else {
        colorString = ev.color.toHex();
      }
      path = $(this).data('rv-value');
      path = path.split('.')[1];
      return model.edit(path, colorString);
    });
    initialFontFamily = model.get('default_textitem_font');
    if (initialFontFamily === '') {
      initialFont = ['builtin', '', 'default'];
    } else {
      initialFont = ['google', initialFontFamily, initialFontFamily];
    }
    return this._fontSelector = new FontSelector($('.pageOptions .fontselector'), {
      initial: initialFont,
      selected: function(style) {
        log("picked", style);
        style = style.replace(/'/g, '');
        return model.edit('default_textitem_font', style);
      }
    });
  };

  PageOptionsView.prototype.chooseCustomBG = function() {
    return fpPickImage().done(this.setBGImageFromFilePicker);
  };

  PageOptionsView.prototype._bindSettingsOptions = function() {
    var clearBtn, clearConfirm, clearConfirmNo, clearConfirmYes, clearProgress, deleteBtn, deleteConfirm, deleteConfirmNo, deleteConfirmYes, image_writability, image_writabilityVal, members, publishedCheckbox, text_writability, text_writabilityVal, title,
      _this = this;
    title = this.$('input.title');
    title.val(this.model.get('title'));
    this.listenTo(title, 'change keyup paste', function() {
      return _this.model.edit('title', title.val());
    });
    members = this.$findOne('.members');
    new MembersView({
      el: members,
      pageId: this.model.get('id'),
      template: ich.tpl_page_viewer_members
    }).render();
    members.show('slideDown');
    text_writability = this.$('select[name=text_writability]');
    text_writabilityVal = parseInt(this.model.get('text_writability'));
    assert(__indexOf.call(_.values(PERMISSIONS), text_writabilityVal) >= 0);
    text_writability.val(text_writabilityVal);
    this.listenTo(text_writability, 'change', function() {
      var newVal;
      newVal = parseInt(text_writability.val());
      log("text_writability val changed", newVal);
      assert(__indexOf.call(_.values(PERMISSIONS), newVal) >= 0);
      return _this.model.edit('text_writability', newVal);
    });
    image_writability = this.$('select[name=image_writability]');
    image_writabilityVal = parseInt(this.model.get('image_writability'));
    assert(__indexOf.call(_.values(PERMISSIONS), image_writabilityVal) >= 0);
    image_writability.val(image_writabilityVal);
    this.listenTo(image_writability, 'change', function() {
      var newVal;
      newVal = parseInt(image_writability.val());
      log("image_writability val changed", newVal);
      assert(__indexOf.call(_.values(PERMISSIONS), newVal) >= 0);
      return _this.model.edit('image_writability', newVal);
    });
    publishedCheckbox = this.$findOne('.published');
    this._checkBoxButton = new CheckboxButton(publishedCheckbox, {
      model: this.model,
      attribute: 'published'
    });
    clearBtn = this.$findOne('input.clear');
    clearConfirm = this.$findOne('.clear_confirm');
    clearProgress = this.$findOne('.clear_progress');
    this.listenTo(clearBtn, 'click', function() {
      clearBtn.hide();
      clearConfirm.show();
      return clearProgress.hide();
    });
    clearConfirmYes = this.$findOne('.clear_confirm .yes');
    this.listenTo(clearConfirmYes, 'click', function() {
      var dfd;
      dfd = API.instanceMethod(_this.model, 'clear');
      clearConfirm.hide();
      clearProgress.text('Clearing...').show();
      dfd.fail(function() {
        return clearProgress.text("Couldn't clear the page. Please refresh and try again.");
      });
      return dfd.done(function() {
        clearProgress.text("Page cleared!");
        return clearBtn.show();
      });
    });
    clearConfirmNo = this.$findOne('.clear_confirm .no');
    this.listenTo(clearConfirmNo, 'click', function() {
      clearBtn.show();
      return clearConfirm.hide();
    });
    deleteBtn = this.$el.findOne('input.delete');
    deleteConfirm = this.$el.findOne('.delete_confirm');
    this.listenTo(deleteBtn, 'click', function() {
      deleteBtn.hide();
      return deleteConfirm.show();
    });
    deleteConfirmYes = this.$findOne('.delete_confirm .yes');
    this.listenTo(deleteConfirmYes, 'click', function() {
      _this.$el.empty().text('Deleting...');
      return _this.model.destroy({
        success: function() {
          return _this.hide();
        },
        error: _this._errBack('Error deleting! Refresh the page and try again.')
      });
    });
    deleteConfirmNo = this.$findOne('.delete_confirm .no');
    return this.listenTo(deleteConfirmNo, 'click', function() {
      deleteBtn.show();
      return deleteConfirm.hide();
    });
  };

  PageOptionsView.prototype._errBack = function(msg) {
    var _this = this;
    return (function() {
      return _this.$el.empty().text(msg);
    });
  };

  PageOptionsView.prototype.setBGImageFromFilePicker = function(fpfile) {
    var i, url,
      _this = this;
    url = fpfile.url;
    log("setBGImageFromFilePicker called with", url);
    this._customBGInput.attr('checked', 'checked').attr('value', url);
    this._customBGLabel.css('background-image', "url('" + url + "')");
    this._customBGChange.show();
    if (Assets.BGPatterns.hasKey(url)) {
      this.model.edit('bg_texture', url);
    } else {
      i = new ImageAtURL(url);
      return i.ensureSize(function() {
        Assets.BGPatterns.add(i);
        return _this.model.edit('bg_texture', url);
      });
    }
  };

  return PageOptionsView;

})(Pane);

ImageItemOptionsView = (function(_super) {

  __extends(ImageItemOptionsView, _super);

  function ImageItemOptionsView() {
    this.unbind = __bind(this.unbind, this);

    this._updateSourceMap = __bind(this._updateSourceMap, this);
    return ImageItemOptionsView.__super__.constructor.apply(this, arguments);
  }

  ImageItemOptionsView.prototype.initialize = function() {
    var t;
    this.setElement(ich.tpl_image_item_options());
    this.$el.appendTo(this.options.parent);
    this.$('.colorPickerInput').colorpicker();
    t = this._tendon = new Tendon.Tendon(this.$el, {});
    t.useBundle(Tendon.colorPickerBundle, ['item', 'border_color', '.colorPickerInput']);
    t.useBundle(Tendon.twoWay, ['item', 'link_to_url', '.linkInput']);
    t.useBundle(Tendon.twoWayInt, ['item', 'border_width', '.border-width']);
    this.listenTo(this.$findOne('textarea.direct-link'), 'click', function() {
      return this.select();
    });
    t.useBinding(Tendon.makePull, ['item', 'change:id', F.caller('getAbsoluteUrl'), 'textarea.direct-link', Tendon.setValue]);
    this.listenTo(this.options.pageView, 'set-selected-itemview', this._updateSourceMap);
    return this._updateSourceMap();
  };

  ImageItemOptionsView.prototype._updateSourceMap = function() {
    var item, _ref;
    item = (_ref = this.options.pageView.selectedIV) != null ? _ref.model : void 0;
    if (!(item instanceof ImageItem)) {
      item = null;
    }
    return this._tendon.updateSourceMap({
      item: item
    });
  };

  ImageItemOptionsView.prototype.unbind = function() {
    return this._tendon.unbind();
  };

  return ImageItemOptionsView;

})(JLView);

EmbedItemOptionsView = (function(_super) {

  __extends(EmbedItemOptionsView, _super);

  function EmbedItemOptionsView() {
    this.unbind = __bind(this.unbind, this);

    this._updateSourceMap = __bind(this._updateSourceMap, this);
    return EmbedItemOptionsView.__super__.constructor.apply(this, arguments);
  }

  EmbedItemOptionsView.prototype.initialize = function() {
    var t;
    this.setElement(ich.tpl_embed_item_options());
    this.$el.appendTo(this.options.parent);
    t = this._tendon = new Tendon.Tendon(this.$el, {});
    this.listenTo(this.$findOne('textarea.direct-link'), 'click', function() {
      return this.select();
    });
    t.useBinding(Tendon.makePull, ['item', 'change:id', F.caller('getAbsoluteUrl'), 'textarea.direct-link', Tendon.setValue]);
    this.listenTo(this.options.pageView, 'set-selected-itemview', this._updateSourceMap);
    return this._updateSourceMap();
  };

  EmbedItemOptionsView.prototype._updateSourceMap = function() {
    var item, _ref;
    item = (_ref = this.options.pageView.selectedIV) != null ? _ref.model : void 0;
    if (!(item instanceof EmbedItem)) {
      item = null;
    }
    return this._tendon.updateSourceMap({
      item: item
    });
  };

  EmbedItemOptionsView.prototype.unbind = function() {
    return this._tendon.unbind();
  };

  return EmbedItemOptionsView;

})(JLView);

TextItemOptionsView = (function(_super) {

  __extends(TextItemOptionsView, _super);

  function TextItemOptionsView() {
    this.unbind = __bind(this.unbind, this);

    this.initialize = __bind(this.initialize, this);

    this._updateSourceMap = __bind(this._updateSourceMap, this);
    return TextItemOptionsView.__super__.constructor.apply(this, arguments);
  }

  TextItemOptionsView.prototype._updateSourceMap = function() {
    var item, itemView;
    itemView = this.options.pageView.selectedIV;
    if (itemView instanceof TextItemView) {
      item = itemView.model;
    } else {
      item = itemView = null;
    }
    return this._tendon.updateSourceMap({
      item: item,
      itemView: itemView
    });
  };

  TextItemOptionsView.prototype.initialize = function() {
    var fontEl, fontFaceEventMap, fontFaceHandler, fontFacePuller,
      _this = this;
    this.setElement(ich.tpl_text_item_editor({
      fonts: Assets.Fonts.list(),
      itemLink: 'http://www.example.com/'
    }));
    this.$el.appendTo(this.options.parent);
    this.$('.colorPickerInput').colorpicker();
    this._tendon = new Tendon.Tendon(this.$el, {
      page: this.options.pageView.model,
      optionsView: this
    });
    this.listenTo(this.options.pageView, 'set-selected-itemview', this._updateSourceMap);
    this._updateSourceMap();
    this.listenTo(this.$findOne('textarea.direct-link'), 'click', function() {
      return this.select();
    });
    this._tendon.useBinding(Tendon.makePull, ['item', 'change:id', F.caller('getAbsoluteUrl'), 'textarea.direct-link', Tendon.setValue]);
    this._tendon.useBundle(Tendon.fancyColorPickerBundle, ['item', 'page', 'itemView', 'color', '.colorPickerInput.fg-color', F.caller('getColor'), this.$el]);
    this._tendon.useBundle(Tendon.fancyColorPickerBundle, ['item', 'page', 'itemView', 'bg_color', '.colorPickerInput.bg-color', F.caller('getBGColor'), this.$el]);
    this._tendon.useBundle(Tendon.fancyFontSizeBundle, ['item', 'page', 'itemView', 'font_size', '.fontSizeSpinner']);
    fontEl = this.$el.findOne('.fontselector');
    this._fontSelector = new FontSelector(fontEl, {
      initial: ['builtin', '', 'default']
    });
    this._tendon.useBinding(Tendon.bbPush, ['item', 'font', '.fontselector', Tendon.getFontPicker, 'fontChange']);
    fontFaceEventMap = Tendon.fancyStyleValueEventMap('item', 'page', 'font');
    fontFaceHandler = function(itemView) {
      var fontFamily, fullFont;
      fontFamily = itemView.getFontFace();
      if (fontFamily === 'inherit') {
        fontFamily = 'Arial';
      }
      fullFont = Assets.Fonts.getByFamily(fontFamily);
      return _this._fontSelector.setSelected(fullFont.family, fullFont.displayName);
    };
    fontFacePuller = new Tendon.Binding(fontFaceEventMap, ['itemView'], fontFaceHandler, true);
    this._tendon.addBinding(fontFacePuller);
    return this._tendon.useBundle(Tendon.twoWay, ['item', 'link_to_url', '.linkInput']);
  };

  TextItemOptionsView.prototype.unbind = function() {
    this._tendon.unbind();
    return this._fontSelector.destroy();
  };

  return TextItemOptionsView;

})(JLView);

ItemEditor = (function(_super) {

  __extends(ItemEditor, _super);

  function ItemEditor() {
    this._setItemView = __bind(this._setItemView, this);
    return ItemEditor.__super__.constructor.apply(this, arguments);
  }

  ItemEditor.prototype.initialize = function() {
    var content;
    this._visible = false;
    this._default = this.$el.findOne('.default-content');
    this.textItemEditor = new TextItemOptionsView({
      pageView: this.options.pageView,
      parent: this.options.parent
    });
    this.imageItemEditor = new ImageItemOptionsView({
      pageView: this.options.pageView,
      parent: this.options.parent
    });
    this.embedItemEditor = new EmbedItemOptionsView({
      pageView: this.options.pageView,
      parent: this.options.parent
    });
    content = this.$el.findOne('.editor-content');
    content.append(this.textItemEditor.$el);
    content.append(this.imageItemEditor.$el);
    content.append(this.embedItemEditor.$el);
    this.listenTo(this.options.pageView, 'set-selected-itemview', this._setItemView);
    return this._setItemView(this.options.pageView.selectedIV);
  };

  ItemEditor.prototype._setItemView = function(itemView) {
    var item;
    item = itemView != null ? itemView.model : void 0;
    if (!item) {
      this.textItemEditor.$el.hide();
      this.imageItemEditor.$el.hide();
      this.embedItemEditor.$el.hide();
      return this._default.show();
    } else if (item instanceof TextItem) {
      this.textItemEditor.$el.show();
      this.embedItemEditor.$el.hide();
      this.imageItemEditor.$el.hide();
      return this._default.hide();
    } else if (item instanceof ImageItem) {
      this.textItemEditor.$el.hide();
      this.embedItemEditor.$el.hide();
      this.imageItemEditor.$el.show();
      return this._default.hide();
    } else {
      assert instanceof EmbedItem;
      this.textItemEditor.$el.hide();
      this.embedItemEditor.$el.show();
      this.imageItemEditor.$el.hide();
      return this._default.hide();
    }
  };

  return ItemEditor;

})(Pane);

MiniMapView = (function(_super) {

  __extends(MiniMapView, _super);

  function MiniMapView() {
    this._makeDraggable = __bind(this._makeDraggable, this);

    this._dragSurface = __bind(this._dragSurface, this);

    this.click = __bind(this.click, this);

    this._movePageToMiniPoint = __bind(this._movePageToMiniPoint, this);

    this._positionViewWindow = __bind(this._positionViewWindow, this);

    this._resizeViewWindow = __bind(this._resizeViewWindow, this);

    this._mapMiniPointToPage = __bind(this._mapMiniPointToPage, this);

    this._mapPagePointToMini = __bind(this._mapPagePointToMini, this);

    this._calculateScale = __bind(this._calculateScale, this);

    this._calculatePageBounds = __bind(this._calculatePageBounds, this);

    this._renderItem = __bind(this._renderItem, this);

    this._itemChanged = __bind(this._itemChanged, this);

    this._bindItemListeners = __bind(this._bindItemListeners, this);

    this.toggleVisible = __bind(this.toggleVisible, this);

    this.toggleMinimize = __bind(this.toggleMinimize, this);

    this._renderAllItems = __bind(this._renderAllItems, this);

    this._changeBackgroundAppearance = __bind(this._changeBackgroundAppearance, this);
    return MiniMapView.__super__.constructor.apply(this, arguments);
  }

  MiniMapView.prototype.events = {
    'click .minimap-inner': 'click',
    'click .minimap-right': 'toggleMinimize'
  };

  MiniMapView.prototype.initialize = function() {
    var canvas, centerX, centerY, _ref,
      _this = this;
    this.pageView = this.options.pageView;
    this.surface = this.pageView.surface;
    this.items = this.pageView.model.items;
    this.miniMapWidth = 184;
    this.miniMapHeight = 150;
    this._PADDING = 1000;
    this._visible = true;
    this._minimized = true;
    canvas = this.$findOne('canvas.minimap-canvas')[0];
    this.context = canvas.getContext('2d');
    canvas.width = this.miniMapWidth;
    canvas.height = this.miniMapHeight;
    this.viewRect = this.$findOne('div.view-rect');
    this.homeRect = this.$findOne('div.home-rect');
    this.minimizeBtn = this.$('div.minimap-minimize-btn');
    this._minimapContainer = this.$findOne('div.minimap-container');
    this._calculatePageBounds();
    setTimeout(function() {
      _this._renderAllItems();
      return _this._bindItemListeners();
    }, 0);
    this.listenTo(this.surface, 'set-center', this._positionViewWindow);
    this.listenTo(this.surface, 'resize', this._resizeViewWindow);
    this.listenTo(this.pageView.model, 'change:bg_color change:bg_texture', this._changeBackgroundAppearance);
    _ref = this.surface.getCenter(), centerX = _ref[0], centerY = _ref[1];
    this.surfaceWindow = {
      centerX: centerX,
      centerY: centerY,
      width: this.surface.width,
      height: this.surface.height
    };
    this._changeBackgroundAppearance();
    this._positionViewWindow(this.surfaceWindow.centerX, this.surfaceWindow.centerY);
    this._resizeViewWindow(this.surfaceWindow.width, this.surfaceWindow.height);
    return this._makeDraggable();
  };

  MiniMapView.prototype._changeBackgroundAppearance = function() {
    var _this = this;
    return this.pageView.getLuminance(function(l) {
      var alpha, bg, lumThreshold, maxAlpha;
      log("got luminance", l);
      maxAlpha = .3;
      lumThreshold = .45;
      alpha = 0;
      if (l < lumThreshold) {
        alpha = maxAlpha * (1 - l / lumThreshold);
      }
      bg = "rgba(255, 255, 255, " + alpha + ")";
      log("setting bg to", bg);
      return _this._minimapContainer.css({
        backgroundColor: bg
      });
    });
  };

  MiniMapView.prototype._renderAllItems = function() {
    var item, _i, _len, _ref;
    this.context.clearRect(0, 0, this.miniMapWidth, this.miniMapHeight);
    _ref = this.items.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      this._renderItem(item);
    }
    return this.$findOne('canvas.minimap-canvas').css({
      left: this.translation[0],
      top: this.translation[1]
    });
  };

  MiniMapView.prototype.toggleMinimize = function(e) {
    var content;
    this.$el.toggleClass('minimized', !this._minimized);
    this._minimized = !this._minimized;
    content = this._minimized ? '&raquo;' : '&laquo;';
    return this.minimizeBtn.empty().html(content);
  };

  MiniMapView.prototype.toggleVisible = function(e) {
    this.$el.toggleClass('hidden', this._visible);
    return this._visible = !this._visible;
  };

  MiniMapView.prototype._bindItemListeners = function() {
    return this.listenTo(this.items, 'add remove change:content edit:x edit:y change:x change:y change:width change:height', this._itemChanged);
  };

  MiniMapView.prototype._itemChanged = function(item) {
    this._calculatePageBounds();
    this._renderAllItems();
    this._positionViewWindow(this.surfaceWindow.centerX, this.surfaceWindow.centerY);
    return this._resizeViewWindow(this.surfaceWindow.width, this.surfaceWindow.height);
  };

  MiniMapView.prototype._renderItem = function(item) {
    var h, height, itemPoint, scaledHeight, scaledWidth, w, width, x, y, _ref;
    if (!item) {
      return;
    }
    itemPoint = item.getPoint();
    _ref = this._mapPagePointToMini(itemPoint), x = _ref[0], y = _ref[1];
    height = 2;
    width = 2;
    if (item.view) {
      height = item.view.$el.height();
      width = item.view.$el.width();
    }
    scaledHeight = Math.ceil(height * this.scale);
    scaledWidth = Math.ceil(width * this.scale);
    h = Math.max(scaledHeight, 2);
    w = Math.max(scaledWidth, 2);
    this.context.fillStyle = "rgba(0, 0, 0, 0.5)";
    return this.context.fillRect(x, y, w, h);
  };

  MiniMapView.prototype._calculatePageBounds = function() {
    var dim, item, itemPoint, _i, _j, _len, _len1, _ref, _ref1;
    this.translation = [0, 0];
    this.topLeft = [0, 0];
    this.bottomRight = [0, 0];
    _ref = this.items.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      itemPoint = item.getPoint();
      _ref1 = [0, 1];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        dim = _ref1[_j];
        if (itemPoint[dim] < this.topLeft[dim]) {
          this.topLeft[dim] = itemPoint[dim];
        } else if (itemPoint[dim] > this.bottomRight[dim]) {
          this.bottomRight[dim] = itemPoint[dim];
        }
      }
    }
    this.topLeft[0] -= this._PADDING;
    this.topLeft[1] -= this._PADDING;
    this.bottomRight[0] += this._PADDING;
    this.bottomRight[1] += this._PADDING;
    return this._calculateScale();
  };

  MiniMapView.prototype._calculateScale = function() {
    var canvasAspectRatio, extraSpace, minimapAspectRatio;
    minimapAspectRatio = this.miniMapWidth / this.miniMapHeight;
    canvasAspectRatio = (this.bottomRight[0] - this.topLeft[0]) / (this.bottomRight[1] - this.topLeft[1]);
    if (minimapAspectRatio < canvasAspectRatio) {
      this.scale = this.miniMapWidth / (this.bottomRight[0] - this.topLeft[0]);
      extraSpace = this.miniMapHeight - (this.scale * (this.bottomRight[1] - this.topLeft[1]));
      return this.translation[1] = extraSpace / 2;
    } else {
      this.scale = this.miniMapHeight / (this.bottomRight[1] - this.topLeft[1]);
      extraSpace = this.miniMapWidth - (this.scale * (this.bottomRight[0] - this.topLeft[0]));
      return this.translation[0] = extraSpace / 2;
    }
  };

  MiniMapView.prototype._mapPagePointToMini = function(point) {
    var newX, newY;
    newX = Math.round(this.scale * (point[0] - this.topLeft[0]));
    newY = Math.round(this.scale * (point[1] - this.topLeft[1]));
    return [newX, newY];
  };

  MiniMapView.prototype._mapMiniPointToPage = function(point) {
    var newX, newY;
    newX = Math.round(point[0] / this.scale + this.topLeft[0]);
    newY = Math.round(point[1] / this.scale + this.topLeft[1]);
    return [newX, newY];
  };

  MiniMapView.prototype._resizeViewWindow = function(w, h) {
    var newHeight, newWidth;
    this.surfaceWindow.height = h;
    this.surfaceWindow.width = w;
    newHeight = Math.ceil(h * this.scale);
    newWidth = Math.ceil(w * this.scale);
    this.viewRect.height(newHeight);
    this.viewRect.width(newWidth);
    this.homeRect.height(newHeight);
    return this.homeRect.width(newWidth);
  };

  MiniMapView.prototype._positionViewWindow = function(centerX, centerY) {
    var homeViewTopLeft, homeViewTopLeftTranslated, surfaceTopLeftX, surfaceTopLeftY, topLeftView, topLeftViewTranslated;
    this.surfaceWindow.centerX = centerX;
    this.surfaceWindow.centerY = centerY;
    if (this._dragging) {
      return;
    }
    surfaceTopLeftX = this.surfaceWindow.centerX - this.surfaceWindow.width / 2;
    surfaceTopLeftY = this.surfaceWindow.centerY - this.surfaceWindow.height / 2;
    topLeftView = [surfaceTopLeftX, surfaceTopLeftY];
    topLeftViewTranslated = this._mapPagePointToMini(topLeftView);
    homeViewTopLeft = [-this.surfaceWindow.width / 2, -this.surfaceWindow.height / 2];
    homeViewTopLeftTranslated = this._mapPagePointToMini(homeViewTopLeft);
    this.homeRect.css({
      top: Math.ceil(this.translation[1] + homeViewTopLeftTranslated[1]),
      left: Math.ceil(this.translation[0] + homeViewTopLeftTranslated[0])
    });
    return this.viewRect.css({
      top: Math.ceil(this.translation[1] + topLeftViewTranslated[1]),
      left: Math.ceil(this.translation[0] + topLeftViewTranslated[0])
    });
  };

  MiniMapView.prototype._movePageToMiniPoint = function(miniX, miniY) {
    var pageX, pageY, _ref;
    _ref = this._mapMiniPointToPage([miniX, miniY]), pageX = _ref[0], pageY = _ref[1];
    return this.surface.moveContentBy(this.surfaceWindow.centerX - pageX, this.surfaceWindow.centerY - pageY);
  };

  MiniMapView.prototype.click = function(e) {
    var containerOffset, relX, relY;
    containerOffset = $(e.currentTarget).offset();
    relX = e.pageX - containerOffset.left;
    relY = e.pageY - containerOffset.top;
    relX -= this.translation[0];
    relY -= this.translation[1];
    return this._movePageToMiniPoint(relX, relY);
  };

  MiniMapView.prototype._dragSurface = function(e, ui) {
    var miniX, miniY;
    miniX = ui.position.left + this.viewRect.width() / 2;
    miniY = ui.position.top + this.viewRect.height() / 2;
    miniX -= this.translation[0];
    miniY -= this.translation[1];
    return this._movePageToMiniPoint(miniX, miniY);
  };

  MiniMapView.prototype._makeDraggable = function() {
    var _this = this;
    return this.viewRect.draggable({
      handle: this.viewRect,
      containment: 'parent',
      start: function() {
        _this._dragging = true;
        return _this.viewRect.css('cursor', 'move');
      },
      stop: function() {
        _this._dragging = false;
        return _this.viewRect.css('cursor', 'pointer');
      },
      drag: this._dragSurface
    });
  };

  return MiniMapView;

})(JLView);

SuggestedFollowView = (function(_super) {

  __extends(SuggestedFollowView, _super);

  function SuggestedFollowView() {
    this._rejectFollowSuggestion = __bind(this._rejectFollowSuggestion, this);

    this.render = __bind(this.render, this);
    return SuggestedFollowView.__super__.constructor.apply(this, arguments);
  }

  SuggestedFollowView.prototype.events = {
    'click .reject-btn': '_rejectFollowSuggestion'
  };

  SuggestedFollowView.prototype.render = function() {
    this.$el.empty();
    this.$el.append(ich.tpl_suggested_follow({
      username: this.model.get('username'),
      profileUrl: this.model.profileUrl()
    }));
    makeFollowButton(this.$el.findOne('button'), this.model);
    return this;
  };

  SuggestedFollowView.prototype._rejectFollowSuggestion = function(item, collection, options) {
    var rejection;
    log("Rejecting this guy", item);
    rejection = new RejectedFollowSuggestion({
      user_id: JL.AuthState.getUserId(),
      target_id: this.model.id
    });
    return rejection.save().done(this.remove());
  };

  return SuggestedFollowView;

})(JLView);

SuggestedFollowsView = (function(_super) {

  __extends(SuggestedFollowsView, _super);

  function SuggestedFollowsView() {
    this._gotSuggestedFollows = __bind(this._gotSuggestedFollows, this);
    return SuggestedFollowsView.__super__.constructor.apply(this, arguments);
  }

  SuggestedFollowsView.prototype.initialize = function() {
    var _this = this;
    this.$el.hide();
    return API.xhrMethod('get-suggested-follows').done(function(response) {
      if (response.success) {
        return _this._gotSuggestedFollows(response.data);
      }
    });
  };

  SuggestedFollowsView.prototype._gotSuggestedFollows = function(users) {
    var el, user, view, viewEl, _i, _len;
    log("Got users", users);
    if (users.length) {
      el = this.$findOne('.users-list');
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        view = new SuggestedFollowView({
          model: new User(user)
        });
        viewEl = view.render().$el;
        el.append(viewEl);
      }
      el.show();
      return this.$el.show();
    }
  };

  return SuggestedFollowsView;

})(JLView);

TutorialView = (function(_super) {

  __extends(TutorialView, _super);

  function TutorialView() {
    this.kill = __bind(this.kill, this);

    this.close = __bind(this.close, this);

    this._activateStep = __bind(this._activateStep, this);

    this._nextClicked = __bind(this._nextClicked, this);

    this._prevClicked = __bind(this._prevClicked, this);

    this._hasNextStep = __bind(this._hasNextStep, this);

    this._hasPrevStep = __bind(this._hasPrevStep, this);

    this.setCurrentStep = __bind(this.setCurrentStep, this);

    this._allComplete = __bind(this._allComplete, this);

    this.finalInstructions = __bind(this.finalInstructions, this);

    this.initialize = __bind(this.initialize, this);

    this.makeSteps = __bind(this.makeSteps, this);
    return TutorialView.__super__.constructor.apply(this, arguments);
  }

  TutorialView.prototype.className = 'tutorial';

  TutorialView.prototype.makeSteps = function(page, surface) {
    var _this = this;
    return [
      {
        copy: "To write, click anywhere on the page and start typing.",
        checker: function() {
          var textItems;
          textItems = page.items.byType('textitem');
          return _.any(textItems, function(i) {
            var _ref;
            return (_ref = i.get('content')) != null ? _ref.length : void 0;
          });
        },
        triggers: [[page.items, 'add'], [page.items, 'remove'], [page.items, 'change:content']]
      }, {
        copy: "Click and drag your mouse to scroll around. Your page is as big as you need it to be.",
        checker: function() {
          return Vec.len(surface.getCenter()) > 20;
        },
        triggers: [[surface, 'set-center']],
        noUncheck: true
      }, {
        copy: "Customize the background color or image of your page. To open or close the options menu, click the gear icon at the top right of the screen and choose 'Page options' from the dropdown.",
        checker: function() {
          var isDefaultColor, isDefaultImage;
          isDefaultColor = page.get('bg_color') === '#F5EDE1';
          isDefaultImage = page.get('bg_texture') === 'light_wool_midalpha.png';
          return !(isDefaultColor && isDefaultImage);
        },
        triggers: [[page, 'change:bg_color'], [page, 'change:bg_texture']],
        noUncheck: true
      }, {
        copy: "Add an image to your page. There are two ways to do this:\n  <ul>\n    <li>\n      Click anywhere on the page, then click on the image icon\n      that pops up. You'll be able to pick a file from\n      your computer, from a URL, or your Dropbox.\n    </li>\n    <li>\n      Copy an image URL from somewhere else, and paste\n      it into your page as text. You'll be prompted to\n      convert it to an image. Here's a sample URL you\n      can use:\n      <input type=\"text\" readonly value=\"https://s3.amazonaws.com/jotleaf-bno/brandnewotter.jpg\" onclick=\"this.select();\">\n    </li>\n  </ul>",
        checker: function() {
          return page.items.byType('imageitem').length;
        },
        triggers: [[page.items, 'add']],
        noUncheck: true
      }, {
        copy: "Style a text or image item individually.\nThere are two ways to do this:\n<ul>\n  <li>\n    Click the gear icon at the top right of the screen and choose 'Item editor' from the dropdown. Then, click an item on your page\n    to modify its style individually.\n  </li>\n  <li>\n    Hover your mouse over an item on your page, like the\n    text you added, until a gear icon appears next to it.\n    Click it to open the Item Editor with that item already\n    selected.\n  </li>\n</ul>",
        checker: function() {
          var attr, item, _i, _j, _len, _len1, _ref, _ref1;
          _ref = page.items.models;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _ref1 = ['color', 'bg_color', 'font_size', 'font', 'border_width', 'border_color'];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              attr = _ref1[_j];
              if (item.get(attr)) {
                return true;
              }
            }
          }
          return false;
        },
        triggers: [[page.items, 'change:color change:bg_color change:font_size change:font change:border_width change:border_color']],
        noUncheck: true
      }, {
        copy: "Add a multimedia embed to your page. To add media from \nYouTube, Vimeo, SoundCloud, or BandCamp,\ncopy a URL from one of those sites, then paste it into your page as\ntext. You'll be prompted to convert it to a multimedia embed. Here's a\nsample URL you can use:\n<input type=\"text\" readonly value=\"http://www.youtube.com/watch?v=epUk3T2Kfno\" onclick=\"this.select();\">",
        checker: function() {
          return page.items.byType('embeditem').length;
        },
        triggers: [[page.items, 'add']],
        noUncheck: true
      }
    ];
  };

  TutorialView.prototype.initialize = function(parentEl, page, surface) {
    var auth, show,
      _this = this;
    this.parentEl = parentEl;
    assert(page && surface);
    ich.tpl_tutorial().appendTo(this.$el);
    this.$el.appendTo(this.parentEl);
    this.steps = this.makeSteps(page, surface);
    this.$findOne('.step-total').text(this.steps.length + 1);
    this.setCurrentStep(0);
    show = function(el, val) {
      return el.toggle(val);
    };
    auth = {
      checker: function() {
        return JL.AuthState.isAuthenticated();
      },
      events: [[JL.AuthState, 'change']]
    };
    return Tendon.Simple(this.$findOne('.kill'), show, auth, _.bind(this.listenTo, this));
  };

  TutorialView.prototype.finalInstructions = function() {
    if (JL.AuthState.isAuthenticated()) {
      return "All done! Now, publish your page to the world, or\nadd members from the Page Options menu. You can\nhide this tutorial with the link below.";
    } else {
      return "All done! \nNow, <a href=\"" + URLs.registration_register + "\">sign up</a> and\nadd this page to your account, start following people, and\nget jotting!";
    }
  };

  TutorialView.prototype._allComplete = function() {
    var step, _i, _len, _ref;
    _ref = this.steps;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      step = _ref[_i];
      if (!step.checker()) {
        return false;
      }
    }
    return true;
  };

  TutorialView.prototype.setCurrentStep = function(stepNum) {
    this.stopListening();
    this._currentStep = stepNum;
    this.$findOne('.step-num').text(stepNum + 1);
    if (stepNum === this.steps.length) {
      this.$findOne('.checkbox').hide();
      this.$findOne('.instructions').html(this.finalInstructions());
      this.$el.toggleClass('step-completed', this._allComplete());
    } else {
      this.$findOne('.checkbox').show();
      this._activateStep(this.steps[stepNum]);
    }
    this.$el.toggleClass('has-prev', this._hasPrevStep());
    return this.$el.toggleClass('has-next', this._hasNextStep());
  };

  TutorialView.prototype._hasPrevStep = function() {
    return this._currentStep > 0;
  };

  TutorialView.prototype._hasNextStep = function() {
    return this._currentStep < this.steps.length;
  };

  TutorialView.prototype.events = {
    'click .prev-step': '_prevClicked',
    'click .next-step': '_nextClicked',
    'click .close': 'close',
    'click .kill': 'kill'
  };

  TutorialView.prototype._prevClicked = function() {
    if (this._hasPrevStep()) {
      return this.setCurrentStep(this._currentStep - 1);
    }
  };

  TutorialView.prototype._nextClicked = function() {
    if (this._hasNextStep()) {
      return this.setCurrentStep(this._currentStep + 1);
    }
  };

  TutorialView.prototype._activateStep = function(step) {
    var checkbox, doCheckbox, event, object, _i, _len, _ref, _ref1, _results,
      _this = this;
    this.$findOne('.instructions').html(step.copy);
    checkbox = this.$findOne('.checkbox');
    doCheckbox = function() {
      var done;
      done = !!step.checker();
      if (done && !checkbox.attr('checked')) {
        _this.$el.effect('highlight', {
          color: '#efe'
        }, 2000);
      }
      checkbox.attr('checked', done);
      return _this.$el.toggleClass('step-completed', done);
    };
    doCheckbox();
    _ref = step.triggers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], object = _ref1[0], event = _ref1[1];
      _results.push(this.listenTo(object, event, function() {
        if (checkbox.attr('checked') && step.noUncheck) {
          return;
        }
        return doCheckbox();
      }));
    }
    return _results;
  };

  TutorialView.prototype.close = function() {
    var remove;
    remove = _.bind(this.remove, this);
    this.$el.hide('slide', {
      direction: 'left'
    }, remove);
    return $('.tutorial-btn').show();
  };

  TutorialView.prototype.kill = function() {
    if (!JL.AuthState.isAuthenticated()) {
      log("killing tutorial without auth?!");
      this.close();
      return;
    }
    JL.AuthState.getUser().edit('wants_tutorial', false);
    return this.close();
  };

  return TutorialView;

})(JLView);
