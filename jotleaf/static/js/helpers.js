// Generated by CoffeeScript 1.4.0
var Color, Vec, clamp, fpMethod, fpPickImage, fpStore, fpStoreUrl, getImageSize, qualifyURL, scaleBoxSize, testSameOrigin,
  _this = this,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Vec = new ((function() {

  function _Class() {}

  _Class.prototype.len = function(vector) {
    var sum, x, _i, _len;
    sum = 0;
    for (_i = 0, _len = vector.length; _i < _len; _i++) {
      x = vector[_i];
      sum += x * x;
    }
    return Math.sqrt(sum);
  };

  _Class.prototype.pointDistance = function(p1, p2) {
    var diff;
    diff = [p1[0] - p2[0], p1[1] - p2[1]];
    return this.len(diff);
  };

  _Class.prototype.segmentAngle = function(p1, p2, p3) {
    var cosine_C, degrees, len_a, len_b, len_c, radians;
    len_a = this.pointDistance(p1, p2);
    len_b = this.pointDistance(p2, p3);
    len_c = this.pointDistance(p3, p1);
    cosine_C = (len_c * len_c - len_a * len_a - len_b * len_b) / (-2 * len_a * len_b);
    radians = Math.acos(cosine_C);
    degrees = 360 * radians / (2 * Math.PI);
    return degrees;
  };

  _Class.prototype.equal = function(p1, p2) {
    return p1[0] === p2[0] && p1[1] === p2[1];
  };

  _Class.prototype.firstObtuse = function(p0, path) {
    var idx, p1, p2, _i, _j, _len, _len1;
    assert(path.length);
    for (idx = _i = 0, _len = path.length; _i < _len; idx = ++_i) {
      p1 = path[idx];
      if (this.equal(p0, p1)) {
        return idx;
      }
    }
    for (idx = _j = 0, _len1 = path.length; _j < _len1; idx = ++_j) {
      p1 = path[idx];
      if (idx === path.length - 1) {
        return 0;
      }
      p2 = path[idx + 1];
      if (this.segmentAngle(p0, p1, p2) > 100) {
        return idx;
      }
    }
  };

  return _Class;

})());

fpMethod = function(methodName, args) {
  var dfd;
  dfd = $.Deferred();
  args.push(function(fpfile) {
    return dfd.resolve(fpfile);
  });
  args.push(function(fperr) {
    return dfd.reject(fperr);
  });
  filepicker[methodName].apply(filepicker, args);
  return dfd;
};

fpPickImage = function() {
  return fpMethod('pick', [
    {
      mimetypes: ['image/*'],
      services: ['COMPUTER', 'URL', 'DROPBOX', 'INSTAGRAM', 'GMAIL', 'WEBCAM']
    }
  ]);
};

fpStoreUrl = function(url) {
  return fpMethod('storeUrl', [url, {}]);
};

fpStore = function(input) {
  return fpMethod('store', [input, {}]);
};

clamp = function(val, lo, hi) {
  return Math.max(Math.min(val, hi), lo);
};

qualifyURL = function(url) {
  var a;
  a = document.createElement('a');
  a.href = url;
  return a.href;
};

testSameOrigin = function(url) {
  var a, loc;
  a = document.createElement('a');
  a.href = url;
  loc = window.location;
  return a.hostname === loc.hostname && a.port === loc.port && a.protocol === loc.protocol;
};

getImageSize = function(src, callback) {
  var i,
    _this = this;
  i = $('<img>').css({
    position: 'absolute',
    top: -10000,
    left: -10000
  });
  i.load(function() {
    var h, w, _ref;
    _ref = [i.width(), i.height()], w = _ref[0], h = _ref[1];
    i.remove();
    return callback(w, h);
  });
  return i.appendTo($('body')).attr('src', src);
};

scaleBoxSize = function(width, height, maxSize) {
  var scaler;
  scaler = Math.min(maxSize / width, maxSize / height);
  if (scaler >= 1) {
    return [width, height];
  }
  width = Math.round(scaler * width);
  height = Math.round(scaler * height);
  if (width > maxSize) {
    width = maxSize;
  }
  if (height > maxSize) {
    height = maxSize;
  }
  return [width, height];
};

Color = new ((function() {

  function _Class() {
    this.getBGLuminance = __bind(this.getBGLuminance, this);

  }

  _Class.prototype.rgbToHsl = function(r, g, b) {
    var d, h, l, max, min, s;
    r /= 255;
    g /= 255;
    b /= 255;
    max = Math.max(r, g, b);
    min = Math.min(r, g, b);
    h = void 0;
    s = void 0;
    l = (max + min) / 2;
    if (max === min) {
      h = s = 0;
    } else {
      d = max - min;
      s = (l > 0.5 ? d / (2 - max - min) : d / (max + min));
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
      }
      h /= 6;
    }
    return [h, s, l];
  };

  _Class.prototype.getCanvasAvgRgb = function(canvas) {
    var avgRgb, b, canvasH, canvasW, g, i, imgData, numBytes, numPixels, r, _i, _ref;
    canvasH = canvas.height;
    canvasW = canvas.width;
    imgData = canvas.getImageData(0, 0, canvasW, canvasH).data;
    avgRgb = [0, 0, 0];
    numPixels = canvasH * canvasW;
    numBytes = numPixels * 4;
    for (i = _i = 0, _ref = numBytes - 1; _i <= _ref; i = _i += 4) {
      r = imgData[i];
      g = imgData[i + 1];
      b = imgData[i + 2];
      avgRgb[0] += r;
      avgRgb[1] += g;
      avgRgb[2] += b;
    }
    avgRgb[0] /= numPixels;
    avgRgb[1] /= numPixels;
    avgRgb[2] /= numPixels;
    return avgRgb;
  };

  _Class.prototype.getBGLuminance = function(color, imageSrc, callback) {
    var drawImage, onReady, size,
      _this = this;
    if (!this.image) {
      this.image = $('<img>');
    }
    if (!this.canvas) {
      this.canvas = $('<canvas/>')[0].getContext('2d');
    }
    size = 20;
    this.canvas.width = this.canvas.height = size;
    this.canvas.clearRect(0, 0, size, size);
    this.canvas.fillStyle = color;
    this.canvas.fillRect(0, 0, size, size);
    onReady = function() {
      var h, l, rgb, s, _ref;
      rgb = _this.getCanvasAvgRgb(_this.canvas);
      _ref = _this.rgbToHsl.apply(_this, rgb), h = _ref[0], s = _ref[1], l = _ref[2];
      return callback(l);
    };
    drawImage = function() {
      try {
        return _this.canvas.drawImage(_this.image[0], 0, 0, size, size);
      } catch (e) {
        return log("Draw Image failed", e);
      }
    };
    if (imageSrc) {
      if (imageSrc !== this._lastImg) {
        this._lastImg = imageSrc;
        this.image.attr('crossOrigin', 'anonymous');
        this.image.attr('src', imageSrc);
        return this.image.load(function() {
          drawImage();
          return onReady();
        });
      } else {
        drawImage();
        return onReady();
      }
    } else {
      return onReady();
    }
  };

  return _Class;

})());
