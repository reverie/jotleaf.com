// Generated by CoffeeScript 1.4.0
var Database2, ModelDatabase2, makeModelCollection,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

makeModelCollection = function(ModelCls, key) {
  var CollectionClass, collection;
  CollectionClass = ModelCls.CollectionClass || Backbone.Collection;
  collection = new CollectionClass([], {
    key: key
  });
  if (collection.model && collection.model !== Backbone.Model) {
    assert(collection.model === ModelCls);
  } else {
    collection.model = ModelCls;
  }
  return collection;
};

ModelDatabase2 = (function() {

  function ModelDatabase2(modelCls) {
    this.modelCls = modelCls;
    this.get = __bind(this.get, this);

    this.search = __bind(this.search, this);

    this.addObject = __bind(this.addObject, this);

    this.addInstance = __bind(this.addInstance, this);

    assert(this.modelCls.collectBy);
    this._collections = {};
  }

  ModelDatabase2.prototype.getKey = function(instance) {
    if (this.modelCls.collectBy === '-') {
      return '';
    } else {
      return instance.get(this.modelCls.collectBy);
    }
  };

  ModelDatabase2.prototype.getCollection = function(key) {
    if (!this._collections[key]) {
      this._collections[key] = makeModelCollection(this.modelCls, key);
    }
    return this._collections[key];
  };

  ModelDatabase2.prototype.addInstance = function(instance) {
    var collection, key;
    key = this.getKey(instance);
    collection = this.getCollection(key);
    return this._collections[key].add(instance, {
      merge: true
    });
  };

  ModelDatabase2.prototype.addObject = function(obj) {
    return this.addInstance(new this.modelCls(obj));
  };

  ModelDatabase2.prototype.search = function(params) {
    var c, collections, matchLists;
    collections = _.values(this._collections);
    matchLists = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = collections.length; _i < _len; _i++) {
        c = collections[_i];
        _results.push(c.where(params));
      }
      return _results;
    })();
    return _.union.apply(_, matchLists);
  };

  ModelDatabase2.prototype.get = function(id) {
    var c, _i, _len, _ref;
    _ref = _.values(this._collections);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      if (c.get(id)) {
        return c.get(id);
      }
    }
  };

  return ModelDatabase2;

})();

Database2 = new ((function() {

  function _Class() {
    this.modelDB = __bind(this.modelDB, this);
    this._models = {};
  }

  _Class.prototype.modelDB = function(modelCls) {
    var key;
    key = modelCls.shortName;
    assert(key);
    if (!this._models[key]) {
      this._models[key] = new ModelDatabase2(modelCls);
    }
    return this._models[key];
  };

  return _Class;

})());
