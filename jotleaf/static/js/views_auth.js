// Generated by CoffeeScript 1.4.0
var LoggedOutView, LoginView, PasswordResetConfirmView, PasswordResetView, RegistrationView, SettingsView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PasswordResetView = (function(_super) {

  __extends(PasswordResetView, _super);

  function PasswordResetView() {
    this._password_reset = __bind(this._password_reset, this);
    return PasswordResetView.__super__.constructor.apply(this, arguments);
  }

  PasswordResetView.bodyClass = 'password_reset';

  PasswordResetView.prototype.documentTitle = 'Reset Your Password';

  PasswordResetView.prototype.events = {
    'submit form.password-reset-form': '_password_reset'
  };

  PasswordResetView.prototype.initialize = function() {
    var errorContainer, form,
      _this = this;
    this.makeMainWebsiteView('tpl_password_reset');
    errorContainer = this.$findOne('.error-container');
    form = this.$findOne('form.password-reset-form');
    this.errorsView = new ErrorsView(form, errorContainer);
    return setTimeout(function() {
      return form.findOne('input.email').focus();
    }, 0);
  };

  PasswordResetView.prototype._password_reset = function(e) {
    var button, email, form, origVal, password_reset,
      _this = this;
    e.preventDefault();
    form = $(e.target);
    form.find('input').attr('disabled', 'disabled');
    email = form.findOne('input.email').val();
    button = form.findOne('input[type=submit]');
    origVal = button.val();
    this.errorsView.clearErrors();
    button.val('Processing...');
    password_reset = $.ajax({
      url: '/xhr/account/password/reset/',
      type: "POST",
      data: {
        email: email
      },
      dataType: "json",
      cache: false
    });
    password_reset.done(function(response) {
      button.val(origVal);
      form.find('input').attr('disabled', false);
      if (response.success) {
        _this.queueSuccessMessage(makeMessage('password_reset_success'));
        return Backbone.history.navigate('/', {
          trigger: true
        });
      } else {
        return _this.errorsView.showErrors(response.data);
      }
    });
    return password_reset.fail(function(err) {
      button.val(origVal);
      return form.find('input').attr('disabled', false);
    });
  };

  return PasswordResetView;

})(TopView);

PasswordResetConfirmView = (function(_super) {

  __extends(PasswordResetConfirmView, _super);

  function PasswordResetConfirmView() {
    this._password_reset_confirm = __bind(this._password_reset_confirm, this);
    return PasswordResetConfirmView.__super__.constructor.apply(this, arguments);
  }

  PasswordResetConfirmView.bodyClass = 'password_reset_confirm';

  PasswordResetConfirmView.prototype.documentTitle = 'Confirm Resetting Your Password';

  PasswordResetConfirmView.prototype.events = {
    'submit form.password-reset-confirm-form': '_password_reset_confirm'
  };

  PasswordResetConfirmView.prototype.initialize = function() {
    var errorContainer, form,
      _this = this;
    this.makeMainWebsiteView('tpl_password_reset_confirm');
    errorContainer = this.$findOne('.error-container');
    form = this.$findOne('form.password-reset-confirm-form');
    this.errorsView = new ErrorsView(form, errorContainer);
    return setTimeout(function() {
      return form.findOne('input.new_password1').focus();
    }, 0);
  };

  PasswordResetConfirmView.prototype._password_reset_confirm = function(e) {
    var button, form, origVal, pass1, pass2, password_reset_confirm, urlWithParams,
      _this = this;
    e.preventDefault();
    form = $(e.target);
    form.find('input').attr('disabled', 'disabled');
    pass1 = form.findOne('input.new_password1').val();
    pass2 = form.findOne('input.new_password2').val();
    button = form.findOne('input[type=submit]');
    origVal = button.val();
    this.errorsView.clearErrors();
    button.val('Setting password...');
    urlWithParams = "/xhr/account/password/reset/confirm/" + this.options.tokens + "/";
    password_reset_confirm = $.ajax({
      url: urlWithParams,
      type: "POST",
      data: {
        new_password1: pass1,
        new_password2: pass2
      },
      dataType: "json",
      cache: false
    });
    password_reset_confirm.done(function(response) {
      button.val(origVal);
      form.find('input').attr('disabled', false);
      if (response.success) {
        _this.queueSuccessMessage(makeMessage('password_reset_confirm_success'));
        return Backbone.history.navigate('/', {
          trigger: true
        });
      } else {
        return _this.errorsView.showErrors(response.data);
      }
    });
    return password_reset_confirm.fail(function(err) {
      button.val(origVal);
      return form.find('input').attr('disabled', false);
    });
  };

  return PasswordResetConfirmView;

})(TopView);

LoginView = (function(_super) {

  __extends(LoginView, _super);

  function LoginView() {
    this._login = __bind(this._login, this);
    return LoginView.__super__.constructor.apply(this, arguments);
  }

  LoginView.bodyClass = 'login';

  LoginView.prototype.documentTitle = 'Sign in to Jotleaf';

  LoginView.prototype.events = {
    'submit form.login-form': '_login'
  };

  LoginView.prototype.initialize = function() {
    var errorContainer, form,
      _this = this;
    this.makeMainWebsiteView('tpl_login');
    errorContainer = this.$findOne('.error-container');
    form = this.$findOne('form.login-form');
    this.errorsView = new ErrorsView(form, errorContainer);
    return setTimeout(function() {
      return form.findOne('input.username').focus();
    }, 0);
  };

  LoginView.prototype._login = function(e) {
    var button, form, login, origVal, password, username,
      _this = this;
    e.preventDefault();
    form = $(e.target);
    form.find('input').attr('disabled', 'disabled');
    username = form.findOne('input.username').val();
    password = form.findOne('input.password').val();
    button = form.findOne('input[type=submit]');
    origVal = button.val();
    this.errorsView.clearErrors();
    button.val('Authenticating...');
    login = $.ajax({
      url: '/xhr/account/login/',
      type: "POST",
      data: {
        username: username,
        password: password
      },
      dataType: "json",
      cache: false
    });
    login.done(function(response) {
      var f, followDB, _i, _len, _ref;
      if (response.authenticated) {
        JL.AuthState.setUser(response.user);
        followDB = Database2.modelDB(Follow);
        _ref = response.follows;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          followDB.addInstance(new Follow(f));
        }
        return Backbone.history.navigate('/home/', {
          trigger: true
        });
      } else {
        _this.errorsView.showErrors(response.errors);
        button.val(origVal);
        return form.find('input').attr('disabled', false);
      }
    });
    return login.fail(function(err) {
      button.val(origVal);
      return form.find('input').attr('disabled', false);
    });
  };

  return LoginView;

})(TopView);

LoggedOutView = (function(_super) {

  __extends(LoggedOutView, _super);

  function LoggedOutView() {
    return LoggedOutView.__super__.constructor.apply(this, arguments);
  }

  LoggedOutView.bodyClass = 'logout';

  LoggedOutView.prototype.documentTitle = 'Signed out of Jotleaf';

  LoggedOutView.prototype.initialize = function() {
    return this.makeMainWebsiteView('tpl_logout');
  };

  return LoggedOutView;

})(TopView);

RegistrationView = (function(_super) {

  __extends(RegistrationView, _super);

  function RegistrationView() {
    this.render = __bind(this.render, this);
    return RegistrationView.__super__.constructor.apply(this, arguments);
  }

  RegistrationView.bodyClass = 'register';

  RegistrationView.prototype.documentTitle = 'Register a Jotleaf Account';

  RegistrationView.prototype.render = function() {
    return this.makeMainWebsiteView('tpl_registration');
  };

  return RegistrationView;

})(BaseRegistration);

SettingsView = (function(_super) {

  __extends(SettingsView, _super);

  function SettingsView() {
    this.unbind = __bind(this.unbind, this);
    return SettingsView.__super__.constructor.apply(this, arguments);
  }

  SettingsView.prototype.documentTitle = 'Jotleaf Account Settings';

  SettingsView.prototype.initialize = function() {
    var submitBtn,
      _this = this;
    this.makeMainWebsiteView('tpl_settings');
    this._tendon = new Tendon.Tendon(this.$el, {
      user: JL.AuthState.getUser()
    });
    this._tendon.useBundle(Tendon.twoWayCheckbox, ['user', 'email_on_new_follower', 'input.email_on_new_follower', this.$el]);
    this._tendon.useBundle(Tendon.twoWayCheckbox, ['user', 'email_on_new_membership', 'input.email_on_new_membership', this.$el]);
    this._tendon.useBundle(Tendon.twoWay, ['user', 'bio', 'textarea.bio', this.$el]);
    submitBtn = this.$findOne('input[type=submit]');
    return this.listenTo(submitBtn, 'click', function() {
      return router._redirect('');
    });
  };

  SettingsView.prototype.unbind = function() {
    return this._tendon.unbind();
  };

  return SettingsView;

})(TopView);
