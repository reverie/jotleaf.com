// Generated by CoffeeScript 1.4.0
var OuterPageView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

OuterPageView = (function(_super) {

  __extends(OuterPageView, _super);

  function OuterPageView() {
    this.toggleShowingTextOptions = __bind(this.toggleShowingTextOptions, this);

    this.toggleShowingOptions = __bind(this.toggleShowingOptions, this);

    this.receivePresence = __bind(this.receivePresence, this);

    this._renderInfobar = __bind(this._renderInfobar, this);

    this._gotPage = __bind(this._gotPage, this);

    this.handleNewOptions = __bind(this.handleNewOptions, this);

    this.wantsToHandle = __bind(this.wantsToHandle, this);

    this.unbind = __bind(this.unbind, this);

    this.initialize = __bind(this.initialize, this);
    return OuterPageView.__super__.constructor.apply(this, arguments);
  }

  OuterPageView.bodyClass = 'page-view';

  OuterPageView.prototype.className = 'page';

  OuterPageView.prototype.documentTitle = function() {
    var _ref;
    return ((_ref = this.page) != null ? _ref.get('title') : void 0) || 'Jotleaf';
  };

  OuterPageView.prototype.initialize = function() {
    var data, pageGet,
      _this = this;
    this.$el.addClass('loading');
    this.nav = ich.tpl_navbar(this.commonContext()).appendTo(this.$el);
    if (this.options.pageId) {
      data = {
        page_id: this.options.pageId
      };
    } else {
      assert(this.options.username && this.options.pageIdentifier);
      data = {
        username: this.options.username,
        page_identifier: this.options.pageIdentifier
      };
    }
    pageGet = API.xhrMethod('get-page', data);
    pageGet.always(function() {
      return _this.$el.removeClass('loading');
    });
    pageGet.fail(function(response) {
      return router.do500();
    });
    return pageGet.done(function(response) {
      var page;
      if (response.success) {
        page = new Page(response.data.page, {
          parse: true
        });
        appendExtraPageAttributes(page, response.data);
        return _this._gotPage(page);
      } else if (response.status_code === 403) {
        return router.do403(_this.options.username);
      } else if (response.status_code === 404) {
        return router.do404();
      } else {
        return router.do500();
      }
    });
  };

  OuterPageView.prototype.unbind = function() {
    var _ref, _ref1;
    if ((_ref = this.page) != null) {
      _ref.unsubscribe();
    }
    if (this._presenceChannel) {
      API.unsubscribePresence(this.page.id, this.receivePresence);
    }
    if ((_ref1 = this.rview) != null) {
      _ref1.unbind();
    }
    this._pageView = null;
    this.minimap = null;
    this.pageOptionsView = null;
    return this.itemEditor = null;
  };

  OuterPageView.prototype.wantsToHandle = function(options) {
    if (!this.page) {
      return false;
    }
    if (options.pageId) {
      return options.pageId === this.options.pageId;
    } else {
      return options.username === this.options.username && options.pageIdentifier === this.options.pageIdentifier;
    }
  };

  OuterPageView.prototype.handleNewOptions = function(options) {
    assert(this.wantsToHandle(options));
    return this._pageView.handleNewLocation(options);
  };

  OuterPageView.prototype._gotPage = function(page) {
    var canEditPage, createdAt, createdInLastMinute, ctx, dropdown, dropdownToggle, itemEditorEl, itemOptionBtn, minimapEl, msAgo, pageOptionsBtn, pageView, showLoginToClaim, toggleMenu, tutorialBtn,
      _this = this;
    this.page = page;
    this.listenTo(page, 'change:title', function() {
      return _this.trigger('change-title', page.get('title'));
    });
    this.trigger('change-title', page.get('title'));
    page.subscribe();
    this._presenceChannel = API.subscribePresence(page.id, this.receivePresence);
    mixpanel.track("Jotleaf Page view", {
      page_id: page.id
    });
    pageView = this._pageView = new PageView({
      model: page,
      parent: this.$el,
      parentView: this,
      fullscreen: this.options.fullscreen,
      initX: this.options.initX || 0,
      initY: this.options.initY || 0,
      initId: this.options.initId
    });
    this.addSubView(pageView);
    pageView.render();
    minimapEl = ich.tpl_minimap();
    minimapEl.appendTo(this.$el);
    this.minimap = new MiniMapView({
      el: minimapEl,
      pageView: pageView
    });
    this.addSubView(this.minimap);
    canEditPage = Permissions.currentUserCanEditPage(page);
    this.nav.remove();
    ctx = this.commonContext();
    ctx.showPageOptions = canEditPage;
    this.nav = ich.tpl_navbar(ctx).appendTo(this.$el);
    this._renderInfobar();
    this.listenTo(page, 'change:title', this._renderInfobar);
    if (canEditPage) {
      dropdown = this.$findOne('.page-options-dropdown');
      dropdownToggle = dropdown.findOne('.dropdown-toggle');
      dropdownToggle.dropdown();
      toggleMenu = function() {
        return dropdownToggle.dropdown('toggle');
      };
      showLoginToClaim = canEditPage && !JL.AuthState.isAuthenticated();
      this.rview = rivets.bind(dropdown, {
        canEditPage: {
          val: function() {
            return canEditPage;
          }
        },
        showLoginToClaim: {
          val: function() {
            return showLoginToClaim;
          }
        }
      });
      this.pageOptionsView = new PageOptionsView({
        model: page,
        parent: this.$el
      });
      this.addSubView(this.pageOptionsView);
      itemEditorEl = ich.tpl_item_editor();
      itemEditorEl.appendTo(this.$el);
      this.itemEditor = new ItemEditor({
        el: itemEditorEl,
        pageView: pageView,
        parent: this.$el
      });
      this.addSubView(this.itemEditor);
      pageOptionsBtn = dropdown.findOne('.options-btn');
      itemOptionBtn = dropdown.findOne('.item-options-btn');
      tutorialBtn = dropdown.findOne('.tutorial-btn');
      this.listenTo(pageOptionsBtn, 'click', function() {
        _this.toggleShowingOptions();
        return toggleMenu();
      });
      this.listenTo(itemOptionBtn, 'click', function() {
        _this.toggleShowingTextOptions();
        return toggleMenu();
      });
      this.listenTo(tutorialBtn, 'click', function() {
        _this.addSubView(new TutorialView(_this.$el, page, pageView.surface));
        return tutorialBtn.hide();
      });
      createdAt = new Date(page.get('created_at'));
      msAgo = new Date().getTime() - createdAt.getTime();
      createdInLastMinute = (msAgo / 1000) < 60;
      if (createdInLastMinute && !page.items.length) {
        this.toggleShowingOptions();
      }
      if (JL.AuthState.getUser().get('wants_tutorial') || !JL.AuthState.isAuthenticated()) {
        this.addSubView(new TutorialView(this.$el, page, pageView.surface));
      } else {
        dropdown.findOne('.tutorial-btn').show();
      }
    }
    this.listenTo(this._pageView.$el, 'start-drag', function() {
      var _ref, _ref1, _ref2;
      _this.nav.addClass('ignore-mouse');
      _this.minimap.$el.addClass('ignore-mouse');
      if ((_ref = _this.pageOptionsView) != null) {
        _ref.$el.addClass('ignore-mouse');
      }
      if ((_ref1 = _this.itemEditor) != null) {
        _ref1.$el.addClass('ignore-mouse');
      }
      return (_ref2 = _this._numOnline) != null ? _ref2.addClass('ignore-mouse') : void 0;
    });
    return this.listenTo(this._pageView.$el, 'stop-drag', function() {
      var _ref, _ref1, _ref2;
      _this.nav.removeClass('ignore-mouse');
      _this.minimap.$el.removeClass('ignore-mouse');
      if ((_ref = _this.pageOptionsView) != null) {
        _ref.$el.removeClass('ignore-mouse');
      }
      if ((_ref1 = _this.itemEditor) != null) {
        _ref1.$el.removeClass('ignore-mouse');
      }
      return (_ref2 = _this._numOnline) != null ? _ref2.removeClass('ignore-mouse') : void 0;
    });
  };

  OuterPageView.prototype._renderInfobar = function() {
    var infobar, owner_username, page, title, userLink;
    page = this.page;
    infobar = this.nav.findOne('.infobar').empty();
    title = $.trim(page.get('title')) || 'A Jotleaf Page';
    owner_username = page.owner.get('username');
    if (owner_username) {
      title += ', by ';
      infobar.text(title);
      userLink = $('<a>').text(owner_username);
      userLink.attr('href', "/" + owner_username + "/");
      return infobar.append(userLink);
    } else {
      return infobar.text(title);
    }
  };

  OuterPageView.prototype.receivePresence = function(type, data) {
    var numOnline;
    this._numOnline || (this._numOnline = $('<div class="num-online">').appendTo(this.$el));
    numOnline = this._presenceChannel.members.count;
    this._numOnline.text("" + numOnline + " online");
    return this._numOnline.toggle(numOnline > 1);
  };

  OuterPageView.prototype.toggleShowingOptions = function() {
    this.itemEditor.hide();
    this.pageOptionsView.toggle();
    return false;
  };

  OuterPageView.prototype.toggleShowingTextOptions = function() {
    this.pageOptionsView.hide();
    this.itemEditor.toggle();
    return false;
  };

  return OuterPageView;

})(TopView);
