// Generated by CoffeeScript 1.4.0
var API, GlobalError,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

GlobalError = function() {
  log("API error", arguments);
  throw new Error("API Error");
};

API = new ((function() {

  function _Class() {
    this.xhrMethod = __bind(this.xhrMethod, this);

    this.instanceMethod = __bind(this.instanceMethod, this);

    this.search = __bind(this.search, this);

    this.getClientData = __bind(this.getClientData, this);

    this.socketID = __bind(this.socketID, this);

    this.unsubscribePresence = __bind(this.unsubscribePresence, this);

    this.unsubscribePage = __bind(this.unsubscribePage, this);

    this.unsubscribeUser = __bind(this.unsubscribeUser, this);

    this.subscribeUser = __bind(this.subscribeUser, this);

    this.subscribePresence = __bind(this.subscribePresence, this);

    this._unsubscribeFromChannel = __bind(this._unsubscribeFromChannel, this);

    this._subscribeToChannel = __bind(this._subscribeToChannel, this);

    this.subscribePage = __bind(this.subscribePage, this);
    this.pusher = new Pusher(JL_CONFIG.PUSHER_KEY);
    this._channels = {};
    this.WINDOW_ID = String(parseInt(Math.random() * Math.pow(2, 32), 10));
  }

  _Class.prototype.subscribePage = function(pageId, receiver) {
    var boundEvent, channel, channelName,
      _this = this;
    channelName = "private-page-" + pageId;
    channel = this._subscribeToChannel(channelName);
    boundEvent = ['item-add', 'item-update', 'item-delete', 'page-update', 'page-delete', 'multi-event'];
    _.each(boundEvent, function(eventName) {
      return channel.bind(eventName, function(data) {
        log("calling receiver for " + eventName);
        return receiver(eventName, data);
      });
    });
    return channel;
  };

  _Class.prototype._subscribeToChannel = function(channelName) {
    var channel;
    if (this._channels[channelName]) {
      return this._channels[channelName];
    }
    return channel = this._channels[channelName] = this.pusher.subscribe(channelName);
  };

  _Class.prototype._unsubscribeFromChannel = function(channelName, receiver) {
    var channel;
    channel = this._channels[channelName];
    if (channel) {
      channel.unbind(channelName, receiver);
      this.pusher.unsubscribe(channelName);
      channel = null;
      return delete this._channels[channelName];
    }
  };

  _Class.prototype.subscribePresence = function(pageId, receiver) {
    var channel, channelName;
    channelName = "presence-page-" + pageId;
    channel = this._subscribeToChannel(channelName);
    channel.bind_all(receiver);
    return channel;
  };

  _Class.prototype.subscribeUser = function(userId, receiver) {
    var boundEvent, channel, channelName,
      _this = this;
    channelName = "private-user-" + userId;
    channel = this._subscribeToChannel(channelName);
    boundEvent = ['nf-follow', 'nf-page', 'nf-text', 'nf-image', 'nf-embed', 'nf-membership', 'nf-delete'];
    _.each(boundEvent, function(eventName) {
      return channel.bind(eventName, function(data) {
        log("calling receiver for " + eventName);
        return receiver(eventName, data);
      });
    });
    return channel;
  };

  _Class.prototype.unsubscribeUser = function(userId, receiver) {
    var channelName;
    channelName = "private-user-" + userId;
    return this._unsubscribeFromChannel(channelName, receiver);
  };

  _Class.prototype.unsubscribePage = function(pageId, receiver) {
    var channelName;
    channelName = "private-page-" + pageId;
    return this._unsubscribeFromChannel(channelName, receiver);
  };

  _Class.prototype.unsubscribePresence = function(pageId, receiver) {
    var channelName;
    channelName = "presence-page-" + pageId;
    return this._unsubscribeFromChannel(channelName, receiver);
  };

  _Class.prototype.socketID = function() {
    var _ref, _ref1;
    return (_ref = this.pusher) != null ? (_ref1 = _ref.connection) != null ? _ref1.socket_id : void 0 : void 0;
  };

  _Class.prototype.getClientData = function() {
    return {
      window_id: this.WINDOW_ID,
      socket_id: this.socketID()
    };
  };

  _Class.prototype.search = function(modelName, searchParams) {
    var data;
    data = JSON.stringify({
      search_params: searchParams,
      meta: API.getClientData()
    });
    return $.ajax({
      type: 'POST',
      url: "/api/v2/" + modelName + "/search/",
      contentType: 'application/json',
      data: data
    });
  };

  _Class.prototype.instanceMethod = function(instance, methodName) {
    var data, url;
    url = instance.url() + methodName + '/';
    data = JSON.stringify({
      meta: API.getClientData()
    });
    return $.ajax({
      type: 'POST',
      url: url,
      contentType: 'application/json',
      data: data
    });
  };

  _Class.prototype.xhrMethod = function(methodName, data) {
    if (data == null) {
      data = null;
    }
    return $.ajax({
      type: 'POST',
      url: "/xhr/" + methodName + "/",
      data: data,
      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
      dataType: 'json'
    });
  };

  return _Class;

})());
