// Generated by CoffeeScript 1.4.0
var DBView, Database, IDView, ModelDatabase, NotImplemented, PageIDView, UsernameView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

NotImplemented = new Error("NotImplemented");

DBView = (function() {

  function DBView(modelCls, modelDB) {
    this.modelCls = modelCls;
    this.modelDB = modelDB;
    this.removeInstance = __bind(this.removeInstance, this);

    this.filter = __bind(this.filter, this);

    this.filterFetch = __bind(this.filterFetch, this);

    this._keyToDeferredFilter = __bind(this._keyToDeferredFilter, this);

    this.fetchList = __bind(this.fetchList, this);

    this.fetch = __bind(this.fetch, this);

    this._keyToDeferredInstance = __bind(this._keyToDeferredInstance, this);

    this.getList = __bind(this.getList, this);

    this.get = __bind(this.get, this);

    this.softGet = __bind(this.softGet, this);

    this.addInstance = __bind(this.addInstance, this);

    this._getValue = __bind(this._getValue, this);

    this._keyFromModel = __bind(this._keyFromModel, this);

    this._rawKeyFromModel = __bind(this._rawKeyFromModel, this);

    this._mergeKey = __bind(this._mergeKey, this);

    this.getAll = __bind(this.getAll, this);

    this._instances = {};
  }

  DBView.prototype.getAll = function() {
    return _.union(_.values(this._instances));
  };

  DBView.prototype._mergeKey = function(key) {
    return key;
  };

  DBView.prototype._rawKeyFromModel = function(instance) {
    throw NotImplemented;
  };

  DBView.prototype._keyFromModel = function(instance) {
    var key;
    key = this._rawKeyFromModel(instance);
    return this._mergeKey(key);
  };

  DBView.prototype._getValue = function(key) {
    var value;
    if (!this._instances[key]) {
      this._instances[key] = [];
    }
    value = this._instances[key];
    assert(_.isArray(value));
    return value;
  };

  DBView.prototype.addInstance = function(instance) {
    var key;
    key = this._keyFromModel(instance);
    assert((__indexOf.call(this._getValue(key), instance) < 0));
    return this._getValue(key).push(instance);
  };

  DBView.prototype.softGet = function(key) {
    var matches;
    key = this._mergeKey(key);
    matches = this._getValue(key);
    if (!matches.length) {
      return;
    }
    if (matches.length > 1) {
      throw new Error("get-method encountered more than one matching model");
    }
    return matches[0];
  };

  DBView.prototype.get = function(key) {
    var instance;
    instance = this.softGet(key);
    if (instance) {
      return instance;
    } else {
      throw new Error("Instance not found", this, "via", key);
    }
  };

  DBView.prototype.getList = function(keyList) {
    return _.map(keyList, this.get);
  };

  DBView.prototype._keyToDeferredInstance = function(key) {
    throw NotImplemented;
  };

  DBView.prototype.fetch = function(key) {
    var iDfd, instance,
      _this = this;
    instance = this.softGet(key);
    if (instance) {
      log("fetch shortcutting");
      return $.when(instance);
    }
    iDfd = this._keyToDeferredInstance(key);
    return $.Deferred(function(dfd) {
      iDfd.done(function(i) {
        _this.modelDB.addInstance(i);
        return dfd.resolve(i);
      });
      return iDfd.fail(function(err) {
        return dfd.reject(err);
      });
    });
  };

  DBView.prototype.fetchList = function(keyList) {
    return $.when.apply($, _.map(keyList, this.fetch));
  };

  DBView.prototype._keyToDeferredFilter = function(key) {
    return NotImplemented = new Error("NotImplemented");
  };

  DBView.prototype.filterFetch = function(key) {
    var filterDfd,
      _this = this;
    filterDfd = this._keyToDeferredFilter(key);
    return $.Deferred(function(dfd) {
      filterDfd.done(function(instanceList) {
        var i, _i, _len;
        for (_i = 0, _len = instanceList.length; _i < _len; _i++) {
          i = instanceList[_i];
          _this.modelDB.addInstance(i);
        }
        return dfd.resolve(instanceList);
      });
      return filterDfd.fail(function(err) {
        return dfd.reject(err);
      });
    });
  };

  DBView.prototype.filter = function(key) {
    return this._getValue(key);
  };

  DBView.prototype.removeInstance = function(instance) {
    var array, index, key;
    key = this._keyFromModel(instance);
    array = this._getValue(key);
    index = array.indexOf(instance);
    return array.splice(index, 1);
  };

  return DBView;

})();

IDView = (function(_super) {

  __extends(IDView, _super);

  function IDView() {
    this._keyToDeferredInstance = __bind(this._keyToDeferredInstance, this);

    this._keyFromModel = __bind(this._keyFromModel, this);
    return IDView.__super__.constructor.apply(this, arguments);
  }

  IDView.prototype._keyFromModel = function(instance) {
    return instance.id;
  };

  IDView.prototype._keyToDeferredInstance = function(id) {
    var i,
      _this = this;
    i = new this.modelCls({
      id: id
    });
    return i.fetch().promise().pipe(function() {
      return i;
    });
  };

  return IDView;

})(DBView);

ModelDatabase = (function() {

  function ModelDatabase(modelCls) {
    this.modelCls = modelCls;
    this["delete"] = __bind(this["delete"], this);

    this.filterFetchBy = __bind(this.filterFetchBy, this);

    this.filterBy = __bind(this.filterBy, this);

    this.addInstance = __bind(this.addInstance, this);

    this.fetchList = __bind(this.fetchList, this);

    this.fetch = __bind(this.fetch, this);

    this.softGet = __bind(this.softGet, this);

    this.getList = __bind(this.getList, this);

    this.get = __bind(this.get, this);

    this.fetchListBy = __bind(this.fetchListBy, this);

    this.fetchBy = __bind(this.fetchBy, this);

    this.softGetBy = __bind(this.softGetBy, this);

    this.getListBy = __bind(this.getListBy, this);

    this.getBy = __bind(this.getBy, this);

    this.addView = __bind(this.addView, this);

    this._views = {};
    this.addView('id', IDView);
  }

  ModelDatabase.prototype.addView = function(name, viewCls) {
    var instance, view, _i, _len, _ref, _results;
    assert(!this._views[name]);
    view = new viewCls(this.modelCls, this);
    this._views[name] = view;
    if (name !== 'id') {
      _ref = this._views['id'].getAll();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        instance = _ref[_i];
        _results.push(view.addInstance(instance));
      }
      return _results;
    }
  };

  ModelDatabase.prototype.getBy = function(viewName, key) {
    return this._views[viewName].get(key);
  };

  ModelDatabase.prototype.getListBy = function(viewName, keyList) {
    return this._views[viewName].getList(keyList);
  };

  ModelDatabase.prototype.softGetBy = function(viewName, key) {
    return this._views[viewName].softGet(key);
  };

  ModelDatabase.prototype.fetchBy = function(viewName, key) {
    return this._views[viewName].fetch(key);
  };

  ModelDatabase.prototype.fetchListBy = function(viewName, keyList) {
    return this._views[viewName].fetchList(keyList);
  };

  ModelDatabase.prototype.get = function(id) {
    return this.getBy('id', id);
  };

  ModelDatabase.prototype.getList = function(ids) {
    return this.getListBy('id', ids);
  };

  ModelDatabase.prototype.softGet = function(id) {
    return this.softGetBy('id', id);
  };

  ModelDatabase.prototype.fetch = function(id) {
    return this.fetchBy('id', id);
  };

  ModelDatabase.prototype.fetchList = function(idList) {
    return this.fetchListBy('id', idList);
  };

  ModelDatabase.prototype.addInstance = function(instance) {
    var view, _, _ref, _results;
    if (this.softGet(instance.id)) {
      return;
    }
    _ref = this._views;
    _results = [];
    for (_ in _ref) {
      view = _ref[_];
      _results.push(view.addInstance(instance));
    }
    return _results;
  };

  ModelDatabase.prototype.filterBy = function(viewName, key) {
    return this._views[viewName].filter(key);
  };

  ModelDatabase.prototype.filterFetchBy = function(viewName, key) {
    assert(key);
    return this._views[viewName].filterFetch(key);
  };

  ModelDatabase.prototype["delete"] = function(instance) {
    var view, _, _ref;
    _ref = this._views;
    for (_ in _ref) {
      view = _ref[_];
      view.removeInstance(instance);
    }
    return instance.destroy();
  };

  return ModelDatabase;

})();

Database = new ((function() {

  function _Class() {
    this.modelDB = __bind(this.modelDB, this);
    this._models = {};
  }

  _Class.prototype.modelDB = function(modelCls) {
    var key;
    key = modelCls.shortName;
    assert(key);
    if (!this._models[key]) {
      this._models[key] = new ModelDatabase(modelCls);
    }
    return this._models[key];
  };

  return _Class;

})());

UsernameView = (function(_super) {

  __extends(UsernameView, _super);

  function UsernameView() {
    this._keyToDeferredInstance = __bind(this._keyToDeferredInstance, this);

    this._mergeKey = __bind(this._mergeKey, this);

    this._rawKeyFromModel = __bind(this._rawKeyFromModel, this);
    return UsernameView.__super__.constructor.apply(this, arguments);
  }

  UsernameView.prototype._rawKeyFromModel = function(instance) {
    return instance.get('username');
  };

  UsernameView.prototype._mergeKey = function(username) {
    return username.toLowerCase();
  };

  UsernameView.prototype._keyToDeferredInstance = function(username) {
    var xhr,
      _this = this;
    xhr = API.search('user', [['username', 'iexact', username]]);
    return $.Deferred(function(dfd) {
      xhr.done(function(result) {
        log("UsernameView fetch got", result, "for", username);
        if (result.length === 0) {
          return dfd.reject("User not found");
        } else {
          assert(result.length === 1);
          return dfd.resolve(new User(result[0]));
        }
      });
      return xhr.fail(function() {
        log("UsernameView failed");
        return dfd.reject("Error finding user. Please refresh and try again.");
      });
    });
  };

  return UsernameView;

})(DBView);

Database.modelDB(User).addView('username', UsernameView);

PageIDView = (function(_super) {

  __extends(PageIDView, _super);

  function PageIDView() {
    this._keyToDeferredFilter = __bind(this._keyToDeferredFilter, this);

    this._rawKeyFromModel = __bind(this._rawKeyFromModel, this);
    return PageIDView.__super__.constructor.apply(this, arguments);
  }

  PageIDView.prototype._rawKeyFromModel = function(instance) {
    return instance.get('page_id');
  };

  PageIDView.prototype._keyToDeferredFilter = function(pageId) {
    var xhr,
      _this = this;
    xhr = API.search(this.modelCls.shortName, [['page_id', 'exact', pageId]]);
    return $.Deferred(function(dfd) {
      xhr.done(function(result) {
        var dct, instances;
        log("PageIDView fetch got", result, "for", pageId);
        instances = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = result.length; _i < _len; _i++) {
            dct = result[_i];
            _results.push(new this.modelCls(dct));
          }
          return _results;
        }).call(_this);
        return dfd.resolve(instances);
      });
      return xhr.fail(function() {
        log("Error in PageIDView");
        return dfd.reject("Error fetching matches for " + pageId);
      });
    });
  };

  return PageIDView;

})(DBView);

Database.modelDB(Membership).addView('page_id', PageIDView);
