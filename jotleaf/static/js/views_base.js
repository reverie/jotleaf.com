// Generated by CoffeeScript 1.4.0
var BaseRegistration, JLView, TopView, URLs, makeMessage, makeUrl, msgs,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

makeUrl = function(content, render) {
  assert(URLs[content]);
  return URLs[content];
};

makeMessage = function(msgName) {
  assert(msgs[msgName]);
  return msgs[msgName];
};

URLs = {
  registration_register: '/account/register/',
  auth_login: '/account/login/',
  settings: '/account/settings/',
  quick_page: '/new',
  home: '/home/',
  pages: '/pages/',
  explore: '#'
};

msgs = {
  password_reset_success: "We have sent you an email with a link to reset your password. Please check your email and click the link to continue.",
  password_reset_confirm_success: "Your password has been reset! You may now log in.",
  registration_success: "Congratulations, you have successfully registered!",
  registration_error: "Sorry, something went wrong with your request! Please try again.",
  logout_success: "Successfully logged out!",
  logout_error: "Log out failed. Try reloading the page.",
  page_claim_yes_success: "You have claimed the page.",
  page_claim_no_success: "The page has been disowned into oblivion."
};

JLView = (function(_super) {

  __extends(JLView, _super);

  function JLView() {
    this.unbind = __bind(this.unbind, this);

    this.destroy = __bind(this.destroy, this);

    this._isYou = __bind(this._isYou, this);

    this._truncatedContent = __bind(this._truncatedContent, this);

    this.contextToArg = __bind(this.contextToArg, this);

    this.commonContext = __bind(this.commonContext, this);

    this.$findOne = __bind(this.$findOne, this);
    return JLView.__super__.constructor.apply(this, arguments);
  }

  JLView.prototype.$findOne = function() {
    var _ref;
    return (_ref = this.$el).findOne.apply(_ref, arguments);
  };

  JLView.prototype.commonContext = function() {
    return {
      STATIC_URL: JL_CONFIG.STATIC_URL,
      url: function() {
        return makeUrl;
      },
      isAuthenticated: JL.AuthState.isAuthenticated(),
      username: JL.AuthState.getUsername()
    };
  };

  JLView.prototype.contextToArg = function(method) {
    return function() {
      var a, args;
      a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args = [this];
      args = args.concat(a);
      return method.apply(null, args);
    };
  };

  JLView.prototype._truncatedContent = function(ctx, maxLen) {
    if (maxLen == null) {
      maxLen = 40;
    }
    if (ctx.content.length > maxLen) {
      return ctx.content.slice(0, maxLen) + '...';
    } else {
      return ctx.content;
    }
  };

  JLView.prototype._isYou = function(ctx) {
    return ctx.creator_id && (ctx.creator_id === JL.AuthState.getUserId());
  };

  JLView.prototype.listenTo = function(obj, name, callback) {
    var id;
    this._listeners || (this._listeners = {});
    id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));
    this._listeners[id] = [obj, name, callback];
    if (obj instanceof jQuery) {
      obj.on(name, callback);
    } else {
      if (name instanceof Object) {
        callback = this;
      }
      obj.on(name, callback, this);
    }
    return this;
  };

  JLView.prototype.stopListening = function(obj, name, callback) {
    var storedCallback, storedName, _i, _len, _ref, _ref1;
    if (!this._listeners) {
      return;
    }
    if (obj) {
      if (obj instanceof jQuery) {
        obj.off(name, callback);
      } else {
        if (name instanceof Object) {
          callback = this;
        }
        obj.off(name, callback, this);
      }
      if (!(name || callback)) {
        delete this._listeners[obj._listenerId];
      }
    } else {
      if (name instanceof Object) {
        callback = this;
      }
      _ref = _.values(this._listeners);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], obj = _ref1[0], storedName = _ref1[1], storedCallback = _ref1[2];
        if (obj instanceof jQuery) {
          obj.off(storedName, storedCallback);
        } else {
          obj.off(name, callback, this);
        }
      }
      this._listeners = {};
    }
    return this;
  };

  JLView.prototype.destroy = function() {
    log("destroying jlview", this);
    log("calling unbind", this);
    this.unbind();
    return this.remove();
  };

  JLView.prototype.unbind = function() {
    return log("base unbind", this);
  };

  return JLView;

})(Backbone.View);

TopView = (function(_super) {

  __extends(TopView, _super);

  function TopView() {
    this.destroy = __bind(this.destroy, this);

    this.setFirstFocus = __bind(this.setFirstFocus, this);

    this.showErrorMessage = __bind(this.showErrorMessage, this);

    this.queueErrorMessage = __bind(this.queueErrorMessage, this);

    this.showSuccessMessage = __bind(this.showSuccessMessage, this);

    this.queueSuccessMessage = __bind(this.queueSuccessMessage, this);

    this.showErrorMessages = __bind(this.showErrorMessages, this);

    this.queueErrorMessages = __bind(this.queueErrorMessages, this);

    this.showSuccessMessages = __bind(this.showSuccessMessages, this);

    this.queueSuccessMessages = __bind(this.queueSuccessMessages, this);

    this._stringsToMessages = __bind(this._stringsToMessages, this);

    this.makeMainWebsiteView = __bind(this.makeMainWebsiteView, this);

    this.addSubView = __bind(this.addSubView, this);

    this.makeSubviewInContainer = __bind(this.makeSubviewInContainer, this);

    this.wantsToHandle = __bind(this.wantsToHandle, this);
    return TopView.__super__.constructor.apply(this, arguments);
  }

  TopView.prototype.documentTitle = 'Jotleaf';

  TopView.prototype.wantsToHandle = function(options) {
    log("can't handle it");
    return false;
  };

  TopView.prototype.handle = function() {
    throw NotImplemented;
  };

  TopView.prototype.makeSubviewInContainer = function(SubView, selector, options) {
    var view;
    if (options == null) {
      options = {};
    }
    options.el = this.$findOne(selector);
    options.topView = this;
    view = new SubView(options);
    this.addSubView(view);
    return view;
  };

  TopView.prototype.addSubView = function(subview) {
    this.subviews || (this.subviews = []);
    return this.subviews.push(subview);
  };

  TopView.prototype.makeMainWebsiteView = function(tplName, context) {
    var base, baseContext, content, fullContext;
    if (context == null) {
      context = {};
    }
    baseContext = this.commonContext();
    base = ich.tpl_main_website(baseContext);
    fullContext = _.extend(baseContext, context);
    content = ich[tplName](fullContext);
    this.content = base.findOne('.content');
    this.content.append(content);
    this.setElement(base);
    this._messagesView = this.makeSubviewInContainer(MessagesView, '.messages-container');
    this.makeSubviewInContainer(ClaimsView, '.claim-notifications-container');
    if (JL.queuedMessages.length) {
      this._messagesView.showMessages(JL.queuedMessages);
      return JL.queuedMessages = [];
    }
  };

  TopView.prototype._stringsToMessages = function(msgStrings, type) {
    var messageObjects, msg, _i, _len;
    if (!msgStrings.length) {
      return [];
    }
    messageObjects = [];
    for (_i = 0, _len = msgStrings.length; _i < _len; _i++) {
      msg = msgStrings[_i];
      messageObjects.push({
        tags: type,
        text: msg
      });
    }
    return messageObjects;
  };

  TopView.prototype.queueSuccessMessages = function(msgs) {
    var msgObjects;
    msgObjects = this._stringsToMessages(msgs, "success-message");
    return JL.queuedMessages = _.union(JL.queuedMessages, msgObjects);
  };

  TopView.prototype.showSuccessMessages = function(msgs) {
    return this._messagesView.showMessages(this._stringsToMessages(msgs, "success-message"));
  };

  TopView.prototype.queueErrorMessages = function(msgs) {
    var msgObjects;
    msgObjects = this._stringsToMessages(msgs, "error-message");
    return JL.queuedMessages = _.union(JL.queuedMessages, msgObjects);
  };

  TopView.prototype.showErrorMessages = function(msgs) {
    return this._messagesView.showMessages(this._stringsToMessages(msgs, "error-message"));
  };

  TopView.prototype.queueSuccessMessage = function(msg) {
    return this.queueSuccessMessages([msg]);
  };

  TopView.prototype.showSuccessMessage = function(msg) {
    return this.showSuccessMessages([msg]);
  };

  TopView.prototype.queueErrorMessage = function(msg) {
    return this.queueErrorMessages([msg]);
  };

  TopView.prototype.showErrorMessage = function(msg) {
    return this.showErrorMessages([msg]);
  };

  TopView.prototype.setFirstFocus = function(selector) {
    var _this = this;
    return this.listenTo(this, 'dom-insert', function() {
      if (document.activeElement.tagName === 'BODY') {
        return _this.$findOne(selector).focus();
      }
    });
  };

  TopView.prototype.destroy = function() {
    var subview;
    if (this.subviews) {
      while (this.subviews.length) {
        subview = this.subviews.pop();
        subview.destroy();
      }
    }
    return TopView.__super__.destroy.apply(this, arguments);
  };

  return TopView;

})(JLView);

BaseRegistration = (function(_super) {

  __extends(BaseRegistration, _super);

  function BaseRegistration() {
    this._register = __bind(this._register, this);

    this.render = __bind(this.render, this);

    this.initialize = __bind(this.initialize, this);
    return BaseRegistration.__super__.constructor.apply(this, arguments);
  }

  BaseRegistration.prototype.initialize = function() {
    var errorContainer, form, url;
    this.render();
    errorContainer = this.$findOne('.error-container');
    form = this.$findOne('form.registration-form');
    this.errorsView = new ErrorsView(form, errorContainer);
    this.setFirstFocus('input.username');
    url = "" + JL_CONFIG.STATIC_URL + "js/ywot_registration.js";
    return $.getScript(url);
  };

  BaseRegistration.prototype.render = function() {
    throw NotImplemented;
  };

  BaseRegistration.prototype.events = {
    'submit form.registration-form': '_register'
  };

  BaseRegistration.prototype._register = function(e) {
    var button, email, form, origVal, password, registration, username,
      _this = this;
    log("Submit from registration form detected", e);
    e.preventDefault();
    form = $(e.target);
    form.find('input').attr('disabled', 'disabled');
    username = form.findOne('input.username').val();
    email = form.findOne('input.email').val();
    password = form.findOne('input.password').val();
    button = form.findOne('input[type=submit]');
    origVal = button.val();
    this.errorsView.clearErrors();
    button.val('Registering...');
    registration = $.ajax({
      url: '/xhr/account/register/',
      type: "POST",
      data: {
        email: email,
        password: password,
        username: username
      },
      dataType: "json",
      cache: false
    });
    registration.done(function(response) {
      if (response.registration_successful) {
        assert(response.user.id);
        mixpanel.alias(response.user.id);
        mixpanel.track("New user signup");
        JL.AuthState.setUser(response.user);
        _this.queueSuccessMessage(makeMessage('registration_success'));
        return router.navigate('/home/', {
          trigger: true
        });
      } else {
        log("registration errors", response.errors);
        _this.errorsView.showErrors(response.errors);
        button.val(origVal);
        return form.find('input').attr('disabled', false);
      }
    });
    return registration.fail(function(err) {
      button.val(origVal);
      form.find('input').attr('disabled', false);
      return _this.errorsView.requestFailed(makeMessage('registration_error'));
    });
  };

  return BaseRegistration;

})(TopView);
